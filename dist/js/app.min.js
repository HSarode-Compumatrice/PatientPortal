/*! PatientPortal - v1.1.1 - 2017-02-28 */angular.module("PatientPortalApp",["ionic","ngCordova","ionic-datepicker","ionic-toast","DataService","dashboardModule","appointmentModule","medicalHistoryModule","profileSettingModule","physicianProfileModule","visitsModule","insuranceHistoryModule","patientFormsModule","patientReminderModule","secureMessageModule","mapModule","billingModule","errorMessageModule","documentsModule","reportsModule","chart.js","chat"]).run(function($rootScope,$state,$filter,$timeout,$ionicPopup,$document,$window,AuthFactory,userAuthFactory,DataBaseService,APPCONSTANTS,DASHBOARDCONSTANTS,APPOINTMENTSCONSTANTS,MEDICALRECORDSCONSTANTS,VISITSCONSTANTS,SECUREMESSAGECONSTANTS,BILLINGCONSTANTS,INSURANCESCONSTANTS,PATIENTDOCUMENTSCONSTANTS,REPORTSCONSTANTS,CHATCONSTANTS,PATIENTPROFILECONSTANTS,CHANGEPASSWORDCONSTANTS,FORGOTPASSWORDCONSTANTS,NOTIFICATIONCONSTANTS,ERRORMESSAGECONSTANTS,ionicToast,$ionicLoading,sharedService){function onDeviceReady(){document.addEventListener("backbutton",function(e){"#/app/dashboard"==window.location.hash?(e.preventDefault(),navigator.app.exitApp()):navigator.app.backHistory()},!1)}$rootScope.APPCONSTANTS=APPCONSTANTS,$rootScope.DASHBOARDCONSTANTS=DASHBOARDCONSTANTS,$rootScope.APPOINTMENTSCONSTANTS=APPOINTMENTSCONSTANTS,$rootScope.MEDICALRECORDSCONSTANTS=MEDICALRECORDSCONSTANTS,$rootScope.VISITSCONSTANTS=VISITSCONSTANTS,$rootScope.SECUREMESSAGECONSTANTS=SECUREMESSAGECONSTANTS,$rootScope.BILLINGCONSTANTS=BILLINGCONSTANTS,$rootScope.INSURANCESCONSTANTS=INSURANCESCONSTANTS,$rootScope.PATIENTDOCUMENTSCONSTANTS=PATIENTDOCUMENTSCONSTANTS,$rootScope.REPORTSCONSTANTS=REPORTSCONSTANTS,$rootScope.CHATCONSTANTS=CHATCONSTANTS,$rootScope.PATIENTPROFILECONSTANTS=PATIENTPROFILECONSTANTS,$rootScope.CHANGEPASSWORDCONSTANTS=CHANGEPASSWORDCONSTANTS,$rootScope.FORGOTPASSWORDCONSTANTS=FORGOTPASSWORDCONSTANTS,$rootScope.NOTIFICATIONCONSTANTS=NOTIFICATIONCONSTANTS,$rootScope.ERRORMESSAGECONSTANTS=ERRORMESSAGECONSTANTS,$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){$ionicLoading.show($rootScope.APPCONSTANTS.LOADER)}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){$ionicLoading.hide(),$rootScope.isReturnToDashboard=!1,"app.dashboard"==fromState.name&&toParams.viewAllStatus&&($rootScope.isReturnToDashboard=!0)}),document.addEventListener("deviceready",onDeviceReady,!1)}).directive("select",function(){return{restrict:"E",scope:!1,link:function(scope,ele){ele.on("touchmove touchstart",function(e){e.stopPropagation()})}}}).config(function($ionicConfigProvider,ionicDatePickerProvider,$httpProvider){var datePickerObj={setLabel:"Set",todayLabel:"Today",closeLabel:"Close",mondayFirst:!1,inputDate:new Date,weeksList:["S","M","T","W","T","F","S"],monthsList:["Jan","Feb","March","April","May","June","July","Aug","Sept","Oct","Nov","Dec"],templateType:"popup",showTodayButton:!0,dateFormat:"dd MMM yyyy",closeOnSelect:!1,disableWeekdays:[],from:new Date(2015,8,1)};ionicDatePickerProvider.configDatePicker(datePickerObj)}).run(["$ionicPlatform","$rootScope","sharedService","$state","DataBaseService","$cordovaPush",function($ionicPlatform,$rootScope,sharedService,$state,DataBaseService,$cordovaPush){$ionicPlatform.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()});var androidConfig={senderID:$rootScope.APPCONSTANTS.SENDERID};document.addEventListener("deviceready",function(){$cordovaPush.register(androidConfig).then(function(result){},function(err){}),$rootScope.$on("$cordovaPush:notificationReceived",function(event,notification){switch(notification.event){case"registered":notification.regid.length>0&&DataBaseService.setDeviceToken(notification.regid);break;case"message":break;case"error":}})},!1)}]).config(["$stateProvider","$urlRouterProvider","$httpProvider",function($stateProvider,$urlRouterProvider,$httpProvider){$httpProvider.defaults.headers.common={},$httpProvider.defaults.headers.post={},$httpProvider.defaults.headers.put={},$httpProvider.defaults.headers.patch={},$stateProvider.state("login",{url:"/login",cache:!0,templateUrl:"templates/login.html",controller:"LoginPageController",authenticate:!1}).state("forgotpassword",{url:"/forgotpassword",cache:!0,templateUrl:"templates/forgetPassword.html",controller:"forgotPassword",authenticate:!1}).state("app",{url:"/app",cache:!0,templateUrl:"templates/menu.html",abstract:!0,controller:"MenuController",authenticate:!0}).state("app.changepassword",{url:"/changepassword",cache:!1,views:{app:{templateUrl:"templates/changePassword.html",controller:"changePasswordController"}},authenticate:!0}),$urlRouterProvider.otherwise("/login")}]).controller("LoginPageController",function($scope,$rootScope,$state,$ionicLoading,$window,sharedService,CommanService,LoginService,CookieService,PushNotificationService,AuthFactory,userAuthFactory,sharedConn,DataBaseService,OrgService){function pushNotification(patientId){var tokenObj={},token=DataBaseService.getDeviceToken();tokenObj.device_type=device.platform,tokenObj.pid=patientId,tokenObj.device_token=token,PushNotificationService.addDeviceToken(tokenObj).then(function(response){}).finally(function(){$ionicLoading.hide()})}$scope.isBrowser=!1,document.addEventListener("deviceready",function(){"browser"==device.platform&&($scope.isBrowser=!0)}),$ionicLoading.show($rootScope.APPCONSTANTS.LOADER),$scope.logoURL=$rootScope.APPCONSTANTS.ORGLOGOBIG,OrgService.getOragnizationData().then(function(data){DataBaseService.setApiConfig(data),sharedService.setApiConfig(data),CommanService.getfacility().then(function(result){$scope.orgFacilities=result.data},function(error){console.log(error)}).finally(function(){window.setTimeout(function(){$ionicLoading.hide()},300)}),$scope.orgObj=JSON.parse(DataBaseService.getApiConfig()).orgName,angular.forEach($scope.orgObj,function(val){"openemr"==val.orgId&&($scope.logoURL=$rootScope.APPCONSTANTS.ORGLOGOBIG,$scope.orgName=val.orgName)})},function(error){console.log("In switch error "+error)}).finally(function(){}),$scope.facilityId="",$scope.switchFacility=function(orgDetail){$scope.facilityId="",orgDetail&&($scope.facilityId=orgDetail.orgId,DataBaseService.setOrgDetail(orgDetail),DataBaseService.setFacilityId(orgDetail.orgId),$scope.loginerror="")},document.addEventListener("deviceready",function(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(p){DataBaseService.setMyCurrentLocation(p)})}),$scope.patientlogin=function(){if($scope.loginerror="",""==$scope.facilityId)return void($scope.loginerror=$rootScope.APPCONSTANTS.FACILITYERROR);if(""==$scope.username||""==$scope.password)return void($scope.loginerror=$rootScope.APPCONSTANTS.ENTERCREDERROR);$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var loginData={username:$scope.username,facility_id:$scope.facilityId,password:$scope.password},XMPP_DOMAIN=$rootScope.CHATCONSTANTS.BOSH_SERVICE,user={jid:loginData.username,pass:loginData.username.toLowerCase()};$scope.login=function(user){sharedConn.login(user.jid,XMPP_DOMAIN,user.pass)};var userdetails=userAuthFactory.login(loginData.username,loginData.facility_id,loginData.password);"undefined"!=userdetails&&LoginService.patientLogin(loginData).then(function(response){if("0"==response[0].status){AuthFactory.isLogged=!0,AuthFactory.user=loginData.username,DataBaseService.setUser(loginData.username),$scope.login(user),CookieService.createCookie("token",response[0].token,1);var fullName=response[0].firstname+" "+response[0].lastname;DataBaseService.setPatientId(response[0].id),DataBaseService.setPatientFullName(fullName),DataBaseService.setData(response),pushNotification(response[0].id),$state.go("app.dashboard")}else $scope.loginerror=$rootScope.APPCONSTANTS.ENTERVALIDCREDERROR}).catch(function(e){console.log(e)}).finally(function(){$ionicLoading.hide()})}}).controller("forgotPassword",function($scope,LoginService){$scope.errorClear=function(){$scope.Touched=!1,$scope.errormessage=""},$scope.sendmail=function(username){return username?void LoginService.forgetpassword({username:username}).then(function(result){result[0].status==-2?$scope.errormessage=result[0].Reason:$scope.IsSuccess=!0}).catch(function(e){console.log(e)}):void($scope.Touched=!0)},$scope.composeEmail=function(){var onSuccess=function(result){},onError=function(msg){};window.plugins.socialsharing.shareViaEmail("Message","Subject",["support@compumatrice.com"],null,null,null,onSuccess,onError)}}).controller("changePasswordController",function($scope,LoginService,DataBaseService,$rootScope){$scope.isShowPassword=!1,$scope.IsSuccess=!1,$scope.inputType="password",$scope.showPassword=function(isShowPassword){isShowPassword?$scope.inputType="text":$scope.inputType="password"},$scope.errorMessageClear=function(){$scope.matchPassError="",$scope.errormessage="",$scope.oldPasswordError=""},$scope.changePassword=function(passObj){if(void 0==passObj)return void($scope.oldPasswordError=!0);if(void 0==passObj.oldpassword)return void($scope.oldPasswordError=!0);if(passObj.newPassword!=passObj.confirmPassword)return void($scope.matchPassError=!0);var changeobj={pid:DataBaseService.getPatientId(),currentpass:passObj.oldpassword,newpass:passObj.newPassword};LoginService.changePassword(changeobj).then(function(result){"-2"==result[0].status?$scope.errormessage=$rootScope.CHANGEPASSWORDCONSTANTS.PASSWORDCHANGEERROR:$scope.IsSuccess=!0})}}).controller("MenuController",function($scope,$ionicSideMenuDelegate){}).controller("NavController",function($scope,$filter,$state,$rootScope,$ionicSideMenuDelegate,CommanService,$timeout,$ionicHistory,$ionicPopover,userAuthFactory,sharedConn,sharedService,DataBaseService,ionicToast,$window){var notificationParam={};$rootScope.Notification=0,notificationParam.pid=DataBaseService.getPatientId(),notificationParam.isData=0,$ionicPopover.fromTemplateUrl("templates/rightMenu.html",{scope:$scope}).then(function(popover){$scope.popover=popover}),$scope.toggleLeft=function(){$ionicSideMenuDelegate.toggleLeft()},$rootScope.myGoBack=function(){$ionicHistory.goBack()},$rootScope.orgLogoURL=$rootScope.APPCONSTANTS.ORGLOGOSMALL,document.addEventListener("deviceready",function(){window.setTimeout(function(){Pusher.logToConsole=!1;var pusher=new Pusher($rootScope.APPCONSTANTS.PUSHERKEY,{encrypted:!0}),channel=pusher.subscribe("my-channel");channel.bind("my-event",function(data){var patientId=DataBaseService.getPatientId(),appDate=$filter("date")(data.appointmentDate,"MMM dd yyyy"),appTimeArray=data.appointmentTime.split(":"),currentTime=new Date;currentTime.setHours(appTimeArray[0]),currentTime.setMinutes(appTimeArray[1]),currentTime=$filter("date")(currentTime,"hh:mm a");var toastMessage="";data.patientId==patientId&&(navigator.vibrate(300),navigator.notification.beep(2),$rootScope.Notification=$rootScope.Notification+1,toastMessage="1"==data.status?"Your appointment for "+data.providerName+" dated "+appDate+" at "+currentTime+" has been approved.":"Your appointment for "+data.providerName+" dated "+appDate+" at "+currentTime+" has been denied.","browser"!=device.platform?sharedService.showNotification(toastMessage):ionicToast.show(toastMessage,"middle",!1,4e3),"app.requested"==$state.current.name?$rootScope.$broadcast("requestedAppointmentEvent"):"app.upcoming"==$state.current.name&&$rootScope.$broadcast("scheduledAppointmentEvent"))})},100)}),$rootScope.patientPortalService=function(){sharedService.checkConnection()?CommanService.portalBussinessService().then(function(result){parseInt(result[0].physicianCount)!=DataBaseService.getPhysiciansCount()&&$scope.$broadcast("physiciansEvent"),parseInt(result[0].appoinmentCount)!=DataBaseService.getAppointmentsCount()&&$scope.$broadcast("scheduledAppointmentEvent"),parseInt(result[0].messageCount)!=DataBaseService.getMessagesCount()&&$scope.$broadcast("messageEvent"),parseInt(result[0].visitCount)!=DataBaseService.getVisitsCount()&&$scope.$broadcast("visitEvent"),parseInt(result[0].notificationCount)!=$rootScope.Notification&&($rootScope.Notification=parseInt(result[0].notificationCount),$scope.$broadcast("notificationEvent")),$timeout($rootScope.patientPortalService,$rootScope.APPCONSTANTS.NOTIFICATIONINTERVAL)}):$timeout($rootScope.patientPortalService,$rootScope.APPCONSTANTS.NOTIFICATIONINTERVAL)},$rootScope.patientPortalService(),$rootScope.profileimgUrl="img/ajax-loader.gif",DataBaseService.getPatientProfileImageUrl().then(function(result){$rootScope.profileimgUrl=result}).catch(function(e){$rootScope.profileimgUrl="img/Userm.jpg"}),$rootScope.patientName=DataBaseService.getPatientFullName(),$scope.logout=function(){userAuthFactory.logout(),$rootScope.resetScope(),sharedConn.logout()},$scope.rightMenuOff=function(){$scope.popover.hide()}}).filter("capitalize",function(){return function(input){return input?input.charAt(0).toUpperCase()+input.substr(1).toLowerCase():""}}).directive("pwCheck",function(){return{require:"ngModel",link:function(scope,elem,attrs,ctrl){var password="#"+attrs.pwCheck;elem.add(password).on("keyup",function(){scope.$apply(function(){ctrl.$setValidity("pwmatch",elem.val()===scope[attrs.pwCheck])})})}}}),angular.module("PatientPortalApp").constant("APIS",{ADDINSURANCE:"updatepatientinsurance",GETINSURANCE:"getinsurances",ADDLIFESTYLEHISTORY:"addpatientlifestylehistory",PATIENTPORTALBUSINESSSERVICE:"patientportalbusinessservice",ADDFAMILYHISTORY:"addfamilyhistory",ADDDEVICETOKEN:"adddevicetoken",LOGINOBJECT:"loginobject",PATIENTCCRCCDREPORT:"patientccrccdreport",GENERATEPATIENTMEDICALRECORD:"generatepatientmedicalrecord",GETPHYSCIAN:"getdoctors",GETMEDICALHISTORY:"getpatienthistory",GETPATIENTAPPOINTMENT:"getappointments",GETDOCTORSHEDULE:"getdoctorschedule",GETREQUESTEDAPPOINTMENT:"getRequestedappointment",ADDAPPOINTMENT:"addappointments",UPDATEAPPOINTMENT:"updateappointment",REQUESTAPPOINTMENT:"requestappointment",REQUESTAPPOINTMENTNEW:"requestappointmentnew",ADDMESSAGE:"addMessage",GETSENTMESSAGES:"getsentmessages",GETMAILLIST:"getemails",DELETEMESSAGES:"deletemessage",FORGETPASSWORD:"forgetpassword",CHANGEPASSWORD:"changePassword",CHANGEMESSAGESTATUS:"changemessagestatus",DELETEAPPOINTMENT:"deleteappointment",GETUPCOMINGAPPOINTMENT:"getupcomingappointment",APICONFIG:"apiconfig",PATIENTLOGIN:"patientlogin",FACILITY:"getfacility",GETNOTIFICATIONS:"getnotifications",UPDATEPROFILE:"updatepatientprofile",FREQUENTLYVISITEDUSERS:"frequentlyvisiteduser",GETFEESHEET:"getfeesheet",GETPATIENTVISITS:"getpatientvisits",GETINSURANCECOMPANIES:"getinsurancecompanies",DELETEREQUESTEDAPPOINTMENT:"deleterequestedappointment",GETPATIENTPROFILEIMAGE:"getpatientdocument",UPDATEPATIENTPROFILEIMAGE:"updatepatientprofileimage",ADDPATIENTDOCUMENT:"addpatientdocument",GETPATIENTDOCUMENT:"getpatientdocument",DELETEPATIENTDOCUMENT:"deletepatientdocument",GETREQUESTEDAPPOINTMENTNEW:"getRequestedappointmentNew",DELETEREQUESTEDAPPOINTMENTNEW:"cancelrequestedappointmentnew",MYPROVIDER:"getmyprovider",GETNOTIFICATIONSCOUNT:"getnotificationscount",GETPRESCRIPTION:"getPrescription",GETVISITSUMMERY:"visitSummery",ADDVITAL:"addpatientvital",ADDMEDICALRECORDS:"addpatientsurgery",PATIENTBILLREPORT:"patientbillreport",DELETENOTIFICATION:"deletenotifications",MAILTOPATIENT:"mailtopatient",GETCOUNTRIES:"getCountries",GETSTATES:"getStates",READNOTIFICATION:"changeNotificationStatus",GETPATIENTPROFILE:"getPatientProfile",UPDATEPATIENTPROFILEDATA:"updatepatientprofileData"}),angular.module("PatientPortalApp").constant("APPCONSTANTS",{DATEFORMAT:"MMM dd yyyy",DATETIMEFORMAT:"MMM dd yyyy hh:mm:a",NOTIFICATIONINTERVAL:6e4,ALERTTITLE:"Appointment",CANCELTITLE:"Cancel",RESCHEDULETITLE:"Reschedule",CANCELTEXT:"No",OKTEXT:"Yes",OKBUTTONTEXT:"Ok",UPDATEINSURANCETEMPLEATE:"Insurance update",LOADER:{content:"Loading",animation:"fade-in",showBackdrop:!0,maxWidth:200,showDelay:0},CONTENTTYPE:"content-type",XMLCONTENTTYPE:"text/xml;charset=utf-8",URLENCODEDCONTENTTYPE:"application/x-www-form-urlencoded;",URLENCODEDCONTENTTYPEUTF:"application/x-www-form-urlencoded;charset=utf-8;",PDFBASE64URL:"data:application/pdf;base64, ",ZIPBASE64URL:"data:application/zip;base64, ",APPLICATIONZIP:"application/zip",CONTENTDISPO:"content-disposition",JSONCONTENTTYPE:"application/json",RESPONSE:"response",REQUEST:"request",SENDERID:"691648151131",PUSHERKEY:"aa626492ce25bcbb122b",PDFEXTENSION:".pdf",PDF:"pdf",PNGEXTENSION:".png",PNG:"png",JPGEXTENSION:".jpg",JPG:"jpg",ZIPEXTENSION:".zip",ZIP:"zip",ORGLOGOBIG:"img/patientConnect360-logo.png",ORGLOGOSMALL:"img/patientConnect360-36x36.png",PATIENTPROFILEIMAGECATEGORY:"14",FACILITYERROR:"Please select facility",ENTERCREDERROR:"Please enter login credentials",ENTERVALIDCREDERROR:"Please enter valid login credentials",NETWORKTEMPLATE:"Newtork not found",SUCCESSDOWNLOAD:"Downloaded successfully",SHARETITLE:"Share via mail",MAILSENTSUCCESS:"Mail sent successfully",SHARESUBJECT:"Sharing medical record"}),angular.module("PatientPortalApp").constant("DASHBOARDCONSTANTS",{MYAPPOINTMENT:"No appointment",RECENTVISIT:"No recent visit",NEWERRORMESSAGE:"No records Found",NOVITALS:"No vitals found",STATUSNONE:"None",STATUSREMDONE:"Reminder done",STATUSCHARTPULLED:"Chart pulled",STATUSCANCELED:"Canceled",STATUSNOSHOW:"No show",STATUSARRIVED:"Arrived",STATUSARRIVEDLATE:"Arrived late",STATUSLEFTWOVISIT:"Left w/o visit",STATUSINSISSUE:"Ins/fin issue",STATUSINEXAM:"In exam room",STATUSCHECKEDOUT:"Checked out",STATUSCODINGDONE:"Coding done",STATUSCANCELED24:"Canceled < 24h",STATUSPENDING:"Pending",STATUSATTENDED:"Attended",CANCELMESSAGE:"Are you sure you want to cancel this appointment?",CANCELTEMPLATE:"Your appointment cancelled successfully",RESCHEDULETEMPLATE:"Are you sure you want to reschedule this appointment?",VISITMESSAGE:"No visit data found"}),angular.module("PatientPortalApp").constant("APPOINTMENTSCONSTANTS",{NEWERRORMESSAGE:"No records found",NOSCHEDULES:"No schedules available",REQUESTEDERRORMESSAGE:"No requested appointments found",SCHEDULEDERRORMESSAGE:"No scheduled appointments found",HISTORYERRORMESSAGE:"No history appointments found",STATUSNONE:"None",STATUSREMDONE:"Reminder done",STATUSCHARTPULLED:"Chart pulled",STATUSCANCELED:"Canceled",STATUSNOSHOW:"No show",STATUSARRIVED:"Arrived",STATUSARRIVEDLATE:"Arrived late",STATUSLEFTWOVISIT:"Left w/o visit",STATUSINSISSUE:"Ins/fin issue",STATUSINEXAM:"In exam room",STATUSCHECKEDOUT:"Checked out",STATUSCODINGDONE:"Coding done",STATUSCANCELED24:"Canceled < 24h",STATUSPENDING:"Pending",STATUSATTENDED:"Attended",CANCELMESSAGE:"Are you sure you want to cancel this appointment?",CANCELTEMPLATE:"Your appointment cancelled successfully",RESCHEDULETEMPLATE:"Are you sure you want to reschedule this appointment?",ENTERREASON:"Please enter the reason",BOOKAPPSUCCESS:"Your appointment is booked successfully",BOOKEDTEMPLATE:"This appointment slot already booked, please try another slot",DATETIMEERRORMESSAGE:"Please select appointment date and time",FILLFORMTEMPLATE:"Your appointment is scheduled.</br>Do you want to fill form?",PROVIDERERROR:"Please select provider",STARTDATEERRORMESSAGE:"Please select date",STARTTIMEERRORMESSAGE:"Please select time",APPREQUESTSUCCESS:"Your appointment request is received successfully"}),angular.module("PatientPortalApp").constant("MEDICALRECORDSCONSTANTS",{RESOLVED:"Resolved",IMPROVED:"Improved",STATUSQUO:"Status quo",WORSE:"Worse",PENDINGFOLLOUP:"Pending followup",UNKNOWN:"Unknown or N/A",FIRST:"First",CHRONICANDRECURRENT:"Chronic/Recurrent",ACUTEONCHRONIC:"Acute on Chronic",EARLYRECURRENCE:"Early recurrence(<2 Mo)",LATERECURRENCE:"Late recurrence(2-12 Mo)",DELAYEDRECURRENCE:"Delayed recurrence(>12 Mo)",NULL:"Null",NOMEDICALRECORDSFOUND:"No record found",ENTERREQUIREDFIELD:"Please enter required field",STARTENDDATECOMPARE:"End date must be greater than begining date",ADDRECORDMESSAGE:"Record added successfully"}),angular.module("PatientPortalApp").constant("VISITSCONSTANTS",{VISITMESSAGE:"No visit data found"}),angular.module("PatientPortalApp").constant("SECUREMESSAGECONSTANTS",{MESSAGETITLE:"Message",DELETETITLE:"Delete Message",SENTERRORMESSAGE:"No sent messages found",INBOXERRORMESSAGE:"No inbox messages found",TRASHERRORMESSAGE:"No trash messages found",DELETETEMPLATE:"Are you sure want to Delete this Message?",DELETEMESSAGESUCCESS:"Your message deleted successfully",MESSAGETEMPLATE:"Your message sent successfully",INBOXMESSAGETYPE:"inbox",SENTBOXMESSAGETYPE:"sent",TRASHBOXMESSAGETYPE:"trash",USERNAMEREQUIRED:"* User Must Be required",DESCRIPTIONREQUIRED:"*Description Must Be required"}),angular.module("PatientPortalApp").constant("BILLINGCONSTANTS",{BILLINGERRORMESSAGE:"No billing record found",NEWERRORMESSAGE:"No records found"}),angular.module("PatientPortalApp").constant("INSURANCESCONSTANTS",{NOINSURANCEFOUND:"No insurances found",UPDATEINSURANCEMESSAGE:"Insurance updated successfully",REQUIREDFIELDMESSAGE:"Please enter required field",INSURANCEUPDATEFAILED:"Failed to update insurance",INSURANCETYPEERROR:"Please select insurance type",INSURANCPROVIDERERROR:"Please select insurance provider",INSURANCPLANNAMEERROR:"Please select insurance plan name",INSURANCEEFFECTIVEDATEERROR:"Please select insurance effective date",INSURANCEPOLICYNUMBERERROR:"Please select insurance policy number",INSURANCERELATIONSHIPERROR:"Please select relationship",FIRSTNAMEERROR:"Please enter first name",MIDDLENAMEERROR:"Please enter middle name",LASTNAMEERROR:"Please enter last name",DOBERROR:"Please enter date of birth",GENDERERROR:"Please select gender",COUNTRYERROR:"Please select country",STATEERROR:"Please select state",PHONENUMBERERROR:"Please enter phone number"}),angular.module("PatientPortalApp").constant("PATIENTDOCUMENTSCONSTANTS",{PATIENTDOCUMENTCATEGORY:[{key:"2",name:"Lab Report"},{key:"3",name:"Medical Record"},{key:"10",name:"Patient Photograph"},{key:"11",name:"CCR"},{key:"12",name:"CCD"},{key:"13",name:"CCDA"}],DELETETITLE:"Delete",CANCELTEXT:"CANCEL",OKTEXT:"OK",NODOCUMENTSFOUND:"No documents found",DOCUMENTDELETEMESSAGE:"Are you sure you want to delete the document?",DELETEDOCUMENT:"1 document deleted",DELETEDOCUMENTFAILED:"Failed to delete document",FILENOTSUPPORTED:"This file format is not supported",SELECTDOCUMENTTYPE:"Please select the document type",SELECTDOCUMENT:"Please select the document",DOCUPLOADSUCCESS:"Document uploaded successfully"}),angular.module("PatientPortalApp").constant("REPORTSCONSTANTS",{DATECOMPARE:"Start date should be less than end date",SELECTDATE:"Select start date and end date",SELECTSTARTDATE:"Select start date",SELECTENDDATE:"Select end date"}),angular.module("PatientPortalApp").constant("CHATCONSTANTS",{BOSH_SERVICE:"https://episode.carelink360.com:7443/http-bind/",Group_Users_Url:"http://cm-dev5.cloudapp.net:9090/plugins/restapi/v1/groups/",privateKey:"MIICXQIBAAKBgQDlOJu6TyygqxfWT7eLtGDwajtNFOb9I5XRb6khyfD1Yt3YiCgQWMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76xFxdU6jE0NQ+Z+zEdhUTooNRaY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4gwQco1KRMDSmXSMkDwIDAQABAoGAfY9LpnuWK5Bs50UVep5c93SJdUi82u7yMx4iHFMc/Z2hfenfYEzu+57fI4fvxTQ//5DbzRR/XKb8ulNv6+CHyPF31xk7YOBfkGI8qjLoq06V+FyBfDSwL8KbLyeHm7KUZnLNQbk8yGLzB3iYKkRHlmUanQGaNMIJziWOkN+N9dECQQD0ONYRNZeuM8zd8XJTSdcIX4a3gy3GGCJxOzv16XHxD03GW6UNLmfPwenKu+cdrQeaqEixrCejXdAFz/7+BSMpAkEA8EaSOeP5Xr3ZrbiKzi6TGMwHMvC7HdJxaBJbVRfApFrE0/mPwmP5rN7QwjrMY+0+AbXcm8mRQyQ1+IGEembsdwJBAN6az8Rv7QnD/YBvi52POIlRSSIMV7SwWvSK4WSMnGb1ZBbhgdg57DXaspcwHsFV7hByQ5BvMtIduHcT14ECfcECQATeaTgjFnqE/lQ22Rk0eGaYO80cc643BXVGafNfd9fcvwBMnk0iGX0XRsOozVt5AzilpsLBYuApa66NcVHJpCECQQDTjI2AQhFc1yRnCU/YgDnSpJVm1nASoRUnU8Jfm3Ozuku7JUXcVpt08DFSceCEX9unCuMcT72rAQlLpdZir876",publicKey:"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDlOJu6TyygqxfWT7eLtGDwajtNFOb9I5XRb6khyfD1Yt3YiCgQWMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76xFxdU6jE0NQ+Z+zEdhUTooNRaY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4gwQco1KRMDSmXSMkDwIDAQAB",historyAPIUrl:"http://cm-dev5.cloudapp.net:88/MessageArchives"}),angular.module("PatientPortalApp").constant("PATIENTPROFILECONSTANTS",{REQUIREDFIELD:"This field is required",PROFILEUPDATESUCCESS:"Your profile updated successfully",PROFILEUPDATEFAILED:"Failed to update profile",CELLNUMBERERROR:"Phone number must contains 10 digits"}),angular.module("PatientPortalApp").constant("CHANGEPASSWORDCONSTANTS",{OLDPASSWORDREQUIRED:"* Old password is required",NEWPASSWORDREQUIRED:"* New password is required",CONFIRMPASSWORDREQUIRED:"* Confirm password is required",PASSWORDMUSTSAME:"'New password' and 'Confirm password' must be same",PASSWORDCHANGEMESS:"Your password has been changed successfully",PASSWORDCHANGEERROR:"Invalid old password"}),angular.module("PatientPortalApp").constant("FORGOTPASSWORDCONSTANTS",{USERNAMEREQUIRED:"* Username is required",FORGETPASSWORDSUCCESS:"Your new password has been sent to your registered email and mobile number",CONTACTUSTEXT:"In case any query, Contact Us",SUPPORTEMAIL:"support@compumatrice.com"}),angular.module("PatientPortalApp").constant("NOTIFICATIONCONSTANTS",{NONOTIFICATIONSFOUND:"No notifications found"}),angular.module("PatientPortalApp").constant("ERRORMESSAGECONSTANTS",{OOPSERROR:"Oops! An Error Occurred",SOMETHINGWRONG:"Somthing went wrong. Please let us know what you were doing when this error occurred. We will fix it as soon as possible.",SUPPORTEMAIL:"support@compumatrice.com",BUGREPORT:"Bug reported to administrator"}),angular.module("appointmentModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.new",{url:"/new",cache:!1,params:{searchString:"",viewAllStatus:null},views:{app:{templateUrl:"app/modules/appointments/new/new.html",controller:"PhysiciansListController"}},authenticate:!0}).state("app.upcoming",{url:"/upcoming",params:{physician:null,viewAllStatus:null},cache:!1,views:{app:{templateUrl:"app/modules/appointments/upcoming/upcoming.html",controller:"UpcomingAppointmentsController"}},authenticate:!0}).state("app.history",{url:"/history",cache:!1,views:{app:{templateUrl:"app/modules/appointments/history/history.html",controller:"HistoryAppointmentsController"}},authenticate:!0}).state("app.book",{url:"/book",cache:!1,params:{physicianId:null,physician:null,appointmentId:null},views:{app:{templateUrl:"app/modules/appointments/new/bookAppointments/book.html",controller:"BookAppointmentsController"}},authenticate:!0}).state("app.request",{url:"/request",cache:!1,params:{physicianId:null,physician:null,appointmentId:null},views:{app:{templateUrl:"app/modules/appointments/new/bookAppointments/requestAppointment.html",controller:"RequestAppointmentsController"}},authenticate:!0}).state("app.requestApp",{url:"/requestApp",cache:!1,views:{app:{templateUrl:"app/modules/appointments/request/requestAppointment.html",controller:"DirectRequestAppointment"}},authenticate:!0}).state("app.requested",{url:"/requested",cache:!1,views:{app:{templateUrl:"app/modules/appointments/upcoming/requestedUpcoming.html",controller:"RequestedUpcomingController"}},authenticate:!0}),$urlRouterProvider.otherwise("/new")}]).filter("searchFor",function(){return function(arr,searchString){if(!searchString)return arr;var result=[];return searchString=searchString.toLowerCase(),angular.forEach(arr,function(item){var fullname=item.firstname.trim()+" "+item.lastname.trim(),fullname_rev=item.lastname.trim()+" "+item.firstname.trim(),speciality="";item.specialty&&(speciality=item.specialty.trim());var mainAddressLine1="",mainCity="",mainstate="";item.mainAddressLine1&&(mainAddressLine1=item.mainAddressLine1),item.mainCity&&(mainCity=item.mainCity),item.mainState&&(mainstate=item.mainState),item.firstname.toLowerCase().trim().indexOf(searchString)===-1&&item.lastname.trim().toLowerCase().indexOf(searchString)===-1&&fullname.trim().toLowerCase().indexOf(searchString)===-1&&fullname_rev.toLowerCase().indexOf(searchString)===-1&&speciality.toLowerCase().indexOf(searchString)===-1&&mainAddressLine1.toLowerCase().indexOf(searchString)===-1&&mainCity.toLowerCase().indexOf(searchString)===-1&&mainstate.toLowerCase().indexOf(searchString)===-1||result.push(item)}),result}}).filter("NextAppointmentsFilter",function($filter){return function(appointments){var currDate=new Date,Appointments=$filter("filter")(appointments,function(value){return new Date(value.eventDate+" "+value.appointmentStartTime)>currDate});return Appointments}}).filter("PrevAppointmentsFilter",function($filter){return function(appointments){var currDate=new Date,Appointments=$filter("filter")(appointments,function(value){return new Date(value.eventDate+" "+value.appointmentStartTime)<currDate});return Appointments}}).filter("ParseTimeFilter",function(){return function(timeString){if(timeString){var timeTokens=timeString.split(":"),dd=new Date(1970,0,1,timeTokens[0],timeTokens[1],timeTokens[2]);if(isNaN(dd.getTime())){var timeTokens=timeString.split(":"),hh=timeTokens[0].split(" ");return new Date(1970,0,1,hh[1],timeTokens[1],timeTokens[2])}return dd}return""}}).controller("PhysiciansListController",function($scope,$state,PhysicianService){function init(){PhysicianService.getPhysicians($scope.searchString).then(function(result){$scope.PhysiciansData=result}).catch(function(e){$scope.PhysiciansData=[]}).finally(function(){$scope.isPhysicianData=!0})}$scope.searchString=$state.params.searchString,$scope.filteredItems=[],$scope.isPhysicianData=!1,init(),$scope.searchPhysicians=function(){init()},$scope.$on("physiciansEvent",function(e){init()}),$scope.sortModel="firstname",$scope.reverse=!0,$scope.setFilter=function(filtertext){"firstname"==filtertext?($scope.reverse=!0,$scope.reverse1=!1,$scope.sortModel=filtertext):"lastname"==filtertext&&($scope.reverse1=!0,$scope.reverse=!1,$scope.sortModel=filtertext)}}).controller("UpcomingAppointmentsController",function($scope,$rootScope,$filter,$state,AppointmentService,$ionicPopup,ionicToast,DataBaseService){function init(){AppointmentService.getAppointmentHistory().then(function(result){$scope.Appointments=result}).catch(function(){$scope.Appointments=[]}).finally(function(){$("#errorMsg").show()})}$("#DateId").val($filter("date")(new Date,$rootScope.APPCONSTANTS.DATEFORMAT));var ipObj={callback:function(val){$scope.sheduleDate=$filter("date")(val,$rootScope.APPCONSTANTS.DATEFORMAT),$("#DateId").val($scope.sheduleDate)},disabledDates:[],from:new Date(2012,1,1),to:new Date(2016,10,30),inputDate:new Date,mondayFirst:!0,disableWeekdays:[0],closeOnSelect:!0,templateType:"popup",showTodayButton:!1};$scope.openDatePicker=function(){ionicDatePicker.openDatePicker(ipObj)},init(),$scope.$on("scheduledAppointmentEvent",function(e){init()}),$scope.showAlert=function(message,isSuccess){$ionicPopup.alert({title:$rootScope.APPCONSTANTS.ALERTTITLE,template:message})},$scope.cancelAppointment=function(appObj){var confirmPopup=$ionicPopup.confirm({title:$rootScope.APPCONSTANTS.CANCELTITLE,template:$rootScope.APPOINTMENTSCONSTANTS.CANCELMESSAGE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res&&AppointmentService.cancelAppointment(appObj).then(function(result){if("0"===result[0].status){isSuccess=!0;var index=$scope.Appointments.indexOf(appObj);$scope.Appointments.splice(index,1),ionicToast.show($rootScope.APPOINTMENTSCONSTANTS.CANCELTEMPLATE,"middle",!1,2500),DataBaseService.removeAppointments(appObj)}}).catch(function(){})})},$scope.resheduleAppointment=function(appObj){var confirmPopup=$ionicPopup.confirm({title:$rootScope.APPCONSTANTS.RESCHEDULETITLE,template:$rootScope.APPOINTMENTSCONSTANTS.RESCHEDULETEMPLATE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res&&$state.go("app.book",{appointmentId:appObj.pc_eid,physicianId:appObj.uprovider_id})})}}).controller("HistoryAppointmentsController",function($scope,AppointmentService,DataBaseService){function init(){AppointmentService.getAppointmentHistory().then(function(result){$scope.Appointments=result}).catch(function(){
$scope.Appointments=[]}).finally(function(){$("#errorMsg").show()}),DataBaseService.getVisits().then(function(result){$scope.myVisits=result}).catch(function(){}).finally(function(){$("#errorMsg").show()})}new Date;init()}).controller("BookAppointmentsController",function($scope,$rootScope,$filter,$state,$stateParams,AppointmentService,PhysicianService,ionicDatePicker,$ionicPopup,$ionicLoading,ionicToast,DataBaseService){function init(){var days=1,paramDate=$filter("date")($scope.sheduleDate,"yyyy-MM-dd"),count=0;AppointmentService.getAppointmentShedule($scope.physicianId,days,paramDate).then(function(result){$scope.shedulesArray=[],angular.forEach(result,function(sheduleObj){var Obj={};Obj.appointmentDate=sheduleObj.appointmentDate;var appDate=$filter("date")(Obj.appointmentDate,$rootScope.APPCONSTANTS.DATEFORMAT),todayDate=$filter("date")(new Date,$rootScope.APPCONSTANTS.DATEFORMAT);appDate==todayDate?Obj.shedules=$scope.checkTodayAppointmentTime(appDate,sheduleObj.available.split(",")):Obj.shedules=sheduleObj.available.split(","),$scope.shedulesArray.push(Obj)}),$scope.shedulesArray[0].shedules.length<=0&&count<=0&&(count++,$scope.sheduleDate.setDate($scope.sheduleDate.getDate()+1),init())}).catch(function(){}).finally(function(){$("#errorMsgid").show()})}function setPhysician(physician){$scope.physician=physician,$scope.physicianId=$scope.physician.id,init(),$scope.address=$scope.physician.mainAddressLine1+", "+$scope.physician.mainCity+", "+$scope.physician.mainState}if($scope.errorMsg="",$scope.otherReason="",$scope.reason="",$scope.isOtherReasonShow=!1,$scope.days=1,$scope.sheduleDate=new Date,$scope.physicianId=0,$state.params.physician?setPhysician($state.params.physician):PhysicianService.getPhysician($state.params.physicianId).then(function(result){setPhysician(result[0])}),$state.params.appointmentId){var appointment=DataBaseService.getAppointment($state.params.appointmentId);$scope.selectedAppointmentDate=appointment.eventDate,$scope.sheduleDate=appointment.eventDate,$scope.selectedTime=appointment.appointmentStartTime,$scope.reason=appointment.pc_hometext}$scope.reasonChange=function(paramReason){$scope.errorMsg="",$scope.reason=paramReason,"Other"==paramReason?$scope.isOtherReasonShow=!0:$scope.isOtherReasonShow=!1},$scope.showNextCalendar=function(){$scope.sheduleDate.setDate($scope.sheduleDate.getDate()+1),init()},$scope.showBackCalendar=function(){$filter("date")($scope.sheduleDate,$rootScope.APPCONSTANTS.DATEFORMAT)!=$filter("date")(new Date,$rootScope.APPCONSTANTS.DATEFORMAT)&&($scope.sheduleDate.setDate($scope.sheduleDate.getDate()-1),init())};var ipObj={callback:function(val){$scope.sheduleDate=new Date(val),init()},disabledDates:[],from:new Date,inputDate:new Date,mondayFirst:!0,closeOnSelect:!0,templateType:"popup",showTodayButton:!1,dateFormat:$rootScope.APPCONSTANTS.DATEFORMAT};$scope.openDatePicker=function(){ionicDatePicker.openDatePicker(ipObj)},$scope.getShedules=function(){init()},$scope.setAppointmentTime=function(appDate,appTime){$scope.errorMsg="",$scope.selectedAppointmentDate=appDate,$scope.selectedTime=appTime},$scope.addUpdateAppointment=function(){$scope.errorMsg="";var patientid=DataBaseService.getPatientId();if($scope.selectedAppointmentDate&&$scope.selectedTime){var selectedAppointmentDate=$filter("date")($scope.selectedAppointmentDate,"yyyy-MM-dd"),facilityId=DataBaseService.getFacilityId(),appointmentObj={pc_catid:5,patientId:patientid,appointmentDate:selectedAppointmentDate,appointmentTime:$scope.selectedTime,pc_title:"",uprovider_id:$scope.physicianId,pc_facility:facilityId,pc_duration:900,pc_apptstatus:"-",pc_hometext:$scope.reason};if(""==$scope.reason)return void($scope.errorMsg=$rootScope.APPOINTMENTSCONSTANTS.ENTERREASON);$stateParams.appointmentId?(appointmentObj.appointmentId=$stateParams.appointmentId,AppointmentService.updateAppointment(appointmentObj).then(function(result){"0"===result[0].status?(isSuccess=!0,angular.forEach($scope.shedulesArray,function(shedule){if(shedule.appointmentDate===$scope.selectedAppointmentDate){var index=shedule.shedules.indexOf($scope.selectedTime);shedule.shedules.splice(index,1)}}),ionicToast.show($rootScope.APPOINTMENTSCONSTANTS.BOOKAPPSUCCESS,"middle",!1,2500),$state.go("app.upcoming")):$ionicLoading.show({template:$rootScope.APPOINTMENTSCONSTANTS.BOOKEDTEMPLATE,noBackdrop:!0,duration:2e3})})):AppointmentService.addAppointment(appointmentObj).then(function(result){"0"===result[0].status?(isSuccess=!0,angular.forEach($scope.shedulesArray,function(shedule){if(shedule.appointmentDate===$scope.selectedAppointmentDate){var index=shedule.shedules.indexOf($scope.selectedTime);shedule.shedules.splice(index,1)}}),DataBaseService.setAppointments(result[0]),ionicToast.show($rootScope.APPOINTMENTSCONSTANTS.BOOKAPPSUCCESS,"middle",!1,2500),$state.go("app.upcoming")):$ionicLoading.show({template:$rootScope.APPOINTMENTSCONSTANTS.BOOKEDTEMPLATE,noBackdrop:!0,duration:2e3})})}else $scope.errorMsg=$rootScope.APPOINTMENTSCONSTANTS.DATETIMEERRORMESSAGE},$scope.showAlert=function(message,isSuccess){var alertPopup=$ionicPopup.alert({title:$rootScope.APPCONSTANTS.ALERTTITLE,template:message});alertPopup.then(function(res){isSuccess&&$state.go("app.upcoming")})},$scope.checkTodayAppointmentTime=function(appointmentDate,shedules){var tempshedules=[],i=0;return $scope.currTime=$filter("date")(new Date,"HH:mm:ss"),angular.forEach(shedules,function(sheduleTime){if(sheduleTime<=$scope.currTime){shedules.indexOf(sheduleTime)}else tempshedules[i]=sheduleTime,i++}),tempshedules},$scope.fillForm=function(appointmentObj){var confirmPopup=$ionicPopup.confirm({title:$rootScope.APPCONSTANTS.ALERTTITLE,template:$rootScope.APPOINTMENTSCONSTANTS.FILLFORMTEMPLATE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res?$state.go("app.patientForms",{physician:$scope.physician,appointment:appointmentObj}):$state.go("app.upcoming")}).catch(function(){})}}).controller("DirectRequestAppointment",function($scope,$rootScope,$filter,$state,AppointmentService,PhysicianService,ionicDatePicker,ionicToast,DataBaseService){function init(){PhysicianService.getPhysicians().then(function(result){$scope.PhysiciansData=result}).catch(function(e){$scope.PhysiciansData=[]}).finally(function(){})}$scope.reason="",$scope.otherReason="",$scope.errorMsg="";var format=$rootScope.APPCONSTANTS.DATEFORMAT;$scope.isOtherReasonShow=!1,$scope.days=1,$scope.sheduleDate=new Date,$scope.openStartDate=$filter("date")($scope.sheduleDate,format),$scope.openEndDate=$filter("date")($scope.sheduleDate,format);var startipObj={callback:function(val){$scope.openStartDate=$filter("date")(val,format)},disabledDates:[],from:new Date,inputDate:new Date,mondayFirst:!0,closeOnSelect:!0,templateType:"popup",showTodayButton:!1,dateFormat:$rootScope.APPCONSTANTS.DATEFORMAT};$scope.openStartDatePicker=function(){ionicDatePicker.openDatePicker(startipObj)},init(),$scope.reasonChange=function(paramReason){$scope.errorMsg="",$scope.reason=paramReason,"Other"==paramReason?$scope.isOtherReasonShow=!0:$scope.isOtherReasonShow=!1},$scope.providerSwitch=function(provider){$scope.errorMsg="",$scope.providerId=provider},$scope.requestAppointment=function(){var patientid=DataBaseService.getPatientId(),facility_id=DataBaseService.getFacilityId(),requestAppointmentObj={appointmentDate:$scope.openStartDate,appointmentTime:$scope.openStartTime,pid:patientid,uprovider_id:$scope.providerId,reason:$scope.reason,facility_id:facility_id};return""==$scope.providerId||"undefined"==typeof $scope.providerId?void($scope.errorMsg=$rootScope.APPOINTMENTSCONSTANTS.PROVIDERERROR):""==$scope.reason?void($scope.errorMsg=$rootScope.APPOINTMENTSCONSTANTS.ENTERREASON):""==$scope.openStartDate?void($scope.errorMsg=$rootScope.APPOINTMENTSCONSTANTS.STARTDATEERRORMESSAGE):""==$scope.openStartTime||"undefined"==typeof $scope.openStartTime?void($scope.errorMsg=$rootScope.APPOINTMENTSCONSTANTS.STARTTIMEERRORMESSAGE):void AppointmentService.requestAppointment1(requestAppointmentObj).then(function(result){result&&(ionicToast.show($rootScope.APPOINTMENTSCONSTANTS.APPREQUESTSUCCESS,"middle",!1,2500),DataBaseService.setRequestedAppointments(result[0]),$state.go("app.requested"),$scope.provider="",$scope.reason="",$scope.openStartTime="")})},$scope.times=["09.00 AM","09.15 AM","09.30 AM","09.45 AM","10.00 AM","10.15 AM","10.30 AM","10.45 AM","11.00 AM","11.15 AM","11.30 AM","11.45 AM","12.00 PM","12.15 PM","12.30 PM","12.45 PM","01.00 PM","01.15 PM","01.30 PM","01.45 PM","02.00 PM","02.15 PM","02.30 PM","02.45 PM","03.00 PM","03.15 PM","03.30 PM","03.45 PM"],$scope.timeSet=function(time){$scope.openStartTime=time}}).controller("RequestAppointmentsController",function($scope,$rootScope,$filter,$state,AppointmentService,PhysicianService,ionicDatePicker,$ionicPopup,ionicToast,DataBaseService){function setPhysician(physician){$scope.physician=physician,$scope.physicianId=$scope.physician.id}$scope.reason="",$scope.otherReason="",$scope.errorMsg="";var format=$rootScope.APPCONSTANTS.DATEFORMAT;$scope.isOtherReasonShow=!1,$scope.otherReason="",$scope.errorMsg="",$scope.days=1,$scope.sheduleDate=new Date,$scope.openStartDate=$filter("date")($scope.sheduleDate,format),$scope.physicianId=0,$state.params.physician?setPhysician($state.params.physician):PhysicianService.getPhysician($state.params.physicianId).then(function(result){setPhysician(result[0])});var startipObj={callback:function(val){$scope.openStartDate=$filter("date")(val,format)},disabledDates:[],from:new Date,inputDate:new Date,mondayFirst:!0,closeOnSelect:!0,templateType:"popup",showTodayButton:!1,dateFormat:$rootScope.APPCONSTANTS.DATEFORMAT},endipObj={callback:function(val){$scope.openEndDate=$filter("date")(val,format)},disabledDates:[],from:new Date,inputDate:new Date,mondayFirst:!0,closeOnSelect:!0,templateType:"popup",showTodayButton:!1};$scope.openStartDatePicker=function(){ionicDatePicker.openDatePicker(startipObj)},$scope.openEndDatePicker=function(){ionicDatePicker.openDatePicker(endipObj)},$scope.getShedules=function(){init()},$scope.setAppointmentTime=function(appDate,appTime){$scope.errorMsg="",$scope.selectedAppointmentDate=appDate,$scope.selectedTime=appTime},$scope.times=["09.00 AM","09.15 AM","09.30 AM","09.45 AM","10.00 AM","10.15 AM","10.30 AM","10.45 AM","11.00 AM","11.15 AM","11.30 AM","11.45 AM","12.00 PM","12.15 PM","12.30 PM","12.45 PM","01.00 PM","01.15 PM","01.30 PM","01.45 PM","02.00 PM","02.15 PM","02.30 PM","02.45 PM","03.00 PM","03.15 PM","03.30 PM","03.45 PM"],$scope.timeSet=function(time){$scope.openStartTime=time},$scope.requestAppointment=function(){var patientid=DataBaseService.getPatientId(),providerId=$scope.physicianId,facility_id=DataBaseService.getFacilityId(),requestAppointmentObj={appointmentDate:$scope.openStartDate,appointmentTime:$scope.openStartTime,pid:patientid,uprovider_id:providerId,reason:$scope.reason,facility_id:facility_id};return""==$scope.openStartDate?void($scope.errorMsg=$rootScope.APPOINTMENTSCONSTANTS.STARTDATEERRORMESSAGE):""==$scope.openStartTime||"undefined"==typeof $scope.openStartTime?void($scope.errorMsg=$rootScope.APPOINTMENTSCONSTANTS.STARTTIMEERRORMESSAGE):""==$scope.reason?void($scope.errorMsg=$rootScope.APPOINTMENTSCONSTANTS.ENTERREASON):void AppointmentService.requestAppointment1(requestAppointmentObj).then(function(result){result&&(ionicToast.show($rootScope.APPOINTMENTSCONSTANTS.APPREQUESTSUCCESS,"middle",!1,2500),DataBaseService.setRequestedAppointments(result[0]),$state.go("app.requested"))})},$scope.showAlert=function(message,isSuccess){var alertPopup=$ionicPopup.alert({title:$rootScope.APPCONSTANTS.ALERTTITLE,template:message});alertPopup.then(function(res){isSuccess&&$state.go("app.upcoming")})},$scope.checkTodayAppointmentTime=function(appointmentDate,shedules){var tempshedules=[],i=0;return $scope.currTime=$filter("date")(new Date,"HH:mm:ss"),angular.forEach(shedules,function(sheduleTime){if(sheduleTime<=$scope.currTime){shedules.indexOf(sheduleTime)}else tempshedules[i]=sheduleTime,i++}),tempshedules},$scope.fillForm=function(appointmentObj){var confirmPopup=$ionicPopup.confirm({title:$rootScope.APPCONSTANTS.ALERTTITLE,template:$rootScope.APPOINTMENTSCONSTANTS.FILLFORMTEMPLATE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res?$state.go("app.patientForms",{physician:$scope.physician,appointment:appointmentObj}):$state.go("app.upcoming")}).catch(function(){})},$scope.reasonChange=function(paramReason){$scope.errorMsg="",$scope.reason=paramReason,"Other"==paramReason?$scope.isOtherReasonShow=!0:$scope.isOtherReasonShow=!1}}).controller("RequestedUpcomingController",function($scope,$rootScope,ionicToast,$filter,$state,AppointmentService,ionicDatePicker,$ionicPopup,DataBaseService){function init(){var patientid=DataBaseService.getPatientId(),patientID={Pid:patientid};AppointmentService.GetRequestedAppointmentNew(patientID).then(function(result){$scope.RequestedAppointments=$filter("filter")(result,function(value){return new Date(value.PcEventDate+" "+value.PcStartTime)>currDate&&2!=value.ApprovelStatus})}).catch(function(){$scope.RequestedAppointments=[]}).finally(function(){$("#errorMsg").show()})}$("#DateId").val($filter("date")(new Date,$rootScope.APPCONSTANTS.DATEFORMAT));var currDate=new Date;init(),$scope.$on("requestedAppointmentEvent",function(e){init()}),$scope.cancelRequestedAppointment=function(appObj){var confirmPopup=$ionicPopup.confirm({title:$rootScope.APPCONSTANTS.CANCELTITLE,template:$rootScope.APPOINTMENTSCONSTANTS.CANCELMESSAGE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res&&AppointmentService.cancelRequestedAppointmentNew(appObj.appointmentId).then(function(result){var xmlDoc=$.parseXML(result.trim()),$xml=$(xmlDoc),status="";$($xml).each(function(){status=$(this).find("Appointment_Audit>Status")[0]});var isSuccess=!1;if("0"===$(status).html()){$scope.requestedAppointmentCount=$scope.requestedAppointmentCount-1,isSuccess=!0;var index=$scope.RequestedAppointments.indexOf(appObj);$scope.RequestedAppointments.splice(index,1),ionicToast.show($rootScope.APPOINTMENTSCONSTANTS.CANCELTEMPLATE,"middle",!1,2500),DataBaseService.removeRequestedAppointments(appObj),DataBaseService.setAppointment(appObj)}}).catch(function(){})})}}).directive("errSrc",function(){return{link:function(scope,element,attrs){element.bind("error",function(){attrs.src!=attrs.errSrc&&attrs.$set("src",attrs.errSrc)})}}}),angular.module("billingModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.billing",{url:"/billing",cache:!0,views:{app:{templateUrl:"app/modules/billing/billing.html",controller:"BillingController"}},authenticate:!0}),$urlRouterProvider.otherwise("/billing")}]).filter("ParseDateFilter",function(){return function(input){return new Date(input)}}).controller("BillingController",function($scope,$timeout,BillingService,ReportService,DataBaseService,CommanService){function init(){function init(){$scope.search={};var bill={};bill.patientid=DataBaseService.getPatientId(),BillingService.getFeesheet(bill).then(function(result){try{$scope.billingInfo=result.Encounter,$scope.patBalDue=result.Summery[0].Total_PatientBalance,$scope.insBalDue=result.Summery[0].Total_InsuranceBalance,$scope.totalBalDue=result.Summery[0].TotalALL_Balance}catch(e){console.log(e)}}).catch(function(e){$scope.billingInfo=[]}).finally(function(){$scope.billingError=!0,$("#errorMsg").show()})}$scope.patBalDue="$0.00",$scope.insBalDue="$0.00",$scope.totalBalDue="$0.00",$scope.totalAmount="$0.00",$scope.billingError=!1,init(),$scope.generateBillPDF=function(bill){var statement={};statement.generatedDate=new Date,statement.encounter=bill.encounterId,statement.facility=DataBaseService.getFacilityId(),statement.patientId=DataBaseService.getPatientId(),ReportService.generateBillPDF(statement).then(function(result){var PdfData={dataType:"DATAURL",fileType:"pdf",fileURL:result[0].pdf,fileName:"BillingDetails"};CommanService.fileDownload(PdfData)}).catch(function(){}).finally(function(){$("#errorMsg").show()})}}init()}),angular.module("chat",[]).config(function($stateProvider,$urlRouterProvider){$stateProvider.state("app.chats",{url:"/chatusers",views:{app:{templateUrl:"app/modules/chat/chats.html",controller:"chatsCtrl"}},authenticate:!0}).state("app.settings",{url:"/chatsettings",views:{tab3:{templateUrl:"app/modules/chat/settings.html",controller:"settingsCtrl"}},authenticate:!0}).state("app.login",{url:"/chatlogin",views:{app:{templateUrl:"app/modules/chat/login.html",controller:"loginCtrl"}},authenticate:!0}).state("app.chatDetails",{url:"/chatsdetail/:chatSenderName/:chatSenderId",views:{app:{templateUrl:"app/modules/chat/chatDetails.html",controller:"chatDetailsCtrl"}},authenticate:!0}),$urlRouterProvider.otherwise("/chatlogin")}).filter("decryptmsg",function(messageEncryption){return function(input){return messageEncryption.decryption(input)}}).controller("settingsCtrl",function($scope,$state,sharedConn){$scope.logout=function(){console.log("T"),sharedConn.logout(),$state.go("login",{},{location:"replace",reload:!0})}}).controller("chatsCtrl",function($scope,$rootScope,$timeout,$state,$ionicScrollDelegate,Chats,$state,ChatDetails,sharedMessages,sharedConn){var myjid=sharedConn.getConnectObj().jid;myjid.split("/")[0];$scope.roomJid="testRoom@conference.episode.carelink360.com",$scope.selectMultiUser=function(userId){Chats.joinGroupChatRoom($scope.roomJid,userId)},$scope.userGroupFilter=JSON.parse(localStorage.orgDetail).orgName,$scope.patientPortalFilter="PatientPortal",$scope.support_UserFilter="SupportUsers",$scope.IsHistoryPresent=!1,$rootScope.chats=Chats.allRoster(),$rootScope.IsUnreadMessage=[],$scope.remove=function(chat){Chats.removeRoster(chat)},$scope.chatDetails=function(to_id,name,lastText){$rootScope.lastTextStatus=lastText,$rootScope.chatdetailuser=name,ChatDetailsObj.setTo(to_id),$state.go("app.chatDetails")},$scope.add=function(add_jid){Chats.addNewRosterContact(add_jid)},$scope.messageRecieve=function(msg){SharedMessages.messageRecieve(msg)},$scope.showGroup=function(groupArray,support_UserFilter){return $scope.checkSpeciality(groupArray),groupArray.indexOf(support_UserFilter)>-1},$scope.checkSpeciality=function(groupArray){for(var i=0;i<groupArray.length;i++){if(0==groupArray[i].indexOf("Specialty")){$rootScope.userSpecialty=groupArray[i].split("Specialty_").toString();break}$rootScope.userSpecialty=" (Patient)"}}}).controller("loginCtrl",function($scope,sharedConn,$state){var XMPP_DOMAIN=$rootScope.CHATCONSTANTS.BOSH_SERVICE;$scope.login=function(user){sharedConn.login(user.jid,XMPP_DOMAIN,user.pass)}}).controller("chatDetailsCtrl",function($scope,$rootScope,$timeout,$state,$ionicScrollDelegate,sharedConn,ChatDetails,sharedMessages,messageEncryption,$stateParams,$ionicLoading){$scope.isOffine="","Offline"==$rootScope.lastTextStatus?$scope.isOffine="You can't send message! User is not available":$scope.isOffine="Type your message",$scope.msgsenddate=new Date,$scope.isHistory=!1,$scope.isMessage=!1,$scope.history_true=!1,null!=$stateParams&&($scope.chattousername=""!=$stateParams.chatSenderName?$stateParams.chatSenderName:$rootScope.chatdetailuser),$scope.hideTime=!0,$scope.data={},$scope.myId=sharedConn.getConnectObj().jid,$rootScope.IsUserSameChat=ChatDetails.getTo(),$scope.to_id=""!=$stateParams.chatSenderId?$stateParams.chatSenderId:ChatDetails.getTo();ionic.Platform.isIOS();$scope.sendMsg=function(to,body){var encryptedMessage=messageEncryption.encryption(body),to_jid=Strophe.getBareJidFromJid(to),timestamp=(new Date).getTime(),reqChannelsItems=$msg({id:timestamp,to:to_jid,type:"chat"}).c("body").t(encryptedMessage);sharedConn.getConnectObj().send(reqChannelsItems.tree()),$scope.isMessage=!1},$scope.messageRecieve=function(msg){SharedMessages.messageRecieve(msg)},$scope.hideToast=function(){ionicToast.hide()},$scope.redirectToast=function(){alert("hi")},$scope.messageToShowFilter=function(item){return 0==item.sendRecive&&item.to==$scope.to_id||1==item.sendRecive&&item.from==$scope.to_id},$scope.decryptmsgFilter=function(item){return messageEncryption.decryption(item)},$scope.showSendMessage=function(){$scope.sendMsg($scope.to_id,$scope.data.message);var d=new Date;d=d.toLocaleTimeString().replace(/:\d+ /," "),$rootScope.messages.push({userId:$scope.myId,text:$scope.data.message,time:d,from:$scope.myId.split("/")[0],to:$scope.to_id,sendRecive:0}),delete $scope.data.message,$ionicScrollDelegate.scrollBottom(!0)},$scope.showHistoryMessage=function(event){$scope.show($ionicLoading);var from_Id=$scope.to_id;sharedConn.getHistoricalMessage(from_Id).then(function(result){$scope.isHistory=!0,""!=result&&result.length>6&&($scope.history_true=!0),$scope.HistoryMessages=result,""==$scope.HistoryMessages&&($scope.IsHistoryPresent=!0),$ionicLoading.hide()})},$scope.checksendmsg=function(event){13==event.which&&void 0!=$scope.data.message&&""!=$scope.data.message&&"Offline"!=$rootScope.lastTextStatus?$scope.showSendMessage():void 0!=$scope.data.message&&""!=$scope.data.message&&"Offline"!=$rootScope.lastTextStatus&&($scope.isMessage=!0)},$scope.sendmsgclick=function(){void 0!=$scope.data.message&&""!=$scope.data.message&&"Offline"!=$rootScope.lastTextStatus&&$scope.showSendMessage()},$scope.Back=function(){$rootScope.IsUserSameChat="",$rootScope.myGoBack()},$scope.scrolltobottom=function(){$ionicScrollDelegate.scrollBottom(!0)},$timeout(function(){console.log(111),$scope.scrolltobottom()},1e3),$scope.show=function(){$ionicLoading.show({template:'<p>Loading...</p><ion-spinner icon="android"></ion-spinner>'})},$scope.hide=function(){$ionicLoading.hide()}}),angular.module("dashboardModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.dashboard",{url:"/dashboard",cache:!1,views:{app:{templateUrl:"app/modules/dashboard/dashboard.html",controller:"DashboardController"}},authenticate:!0}),$urlRouterProvider.otherwise("/dashboard")}]).controller("DashboardController",function($scope,$rootScope,$filter,$state,AppointmentService,$ionicPopup,ionicToast,MedicalService,DataBaseService,CommanService,$timeout,PatientVisitService){function init(){new Date;DataBaseService.getAppointments().then(function(result){$scope.Appointments=$filter("filter")(result,function(value){return new Date(value.eventDate+" "+value.appointmentStartTime)>currDate})}).catch(function(){$scope.Appointments=[]}).finally(function(){$("#errorMsg").show()}),DataBaseService.getMyProvider().then(function(result){$scope.myProvider=result}).catch(function(e){$scope.myProvider=[]}).finally(function(){}),DataBaseService.getVisits().then(function(result){$scope.myVisits=result}).catch(function(){}).finally(function(){$("#errorMsg").show()}),$scope.Vitals=[],DataBaseService.getMedicalDetail().then(function(result){angular.forEach(result.vitalslist,function(vitalObj){$scope.Vitals.push(vitalObj)}),$scope.graph={};var weightArray=[],HeightArray=[],BMIArray=[],TempArray=[];$scope.graph.labels=[],$scope.graph.data=[];var limitto=0;angular.forEach($scope.Vitals,function(vitalObj){if(limitto<=2){var Vitalsdate=new Date(vitalObj.Vitalsdate);isDate(Vitalsdate)&&(limitto++,$scope.graph.labels.push($filter("date")(new Date(vitalObj.Vitalsdate),"MMM dd yyyy")),weightArray.push(parseFloat(vitalObj.Weight)),HeightArray.push(parseFloat(vitalObj.Height)),BMIArray.push(parseFloat(vitalObj.Bmi)),TempArray.push(parseFloat(vitalObj.Temperature)))}}),$scope.graph.data.push(weightArray),$scope.graph.data.push(HeightArray),$scope.graph.data.push(BMIArray),$scope.graph.data.push(TempArray),$scope.graph.series=["Weight","Height","BMI","Temp."]})}var currDate=new Date;$("#DateId").val($filter("date")(new Date,$rootScope.APPCONSTANTS.DATEFORMAT)),init(),$scope.cancelAppointment=function(appObj){var confirmPopup=$ionicPopup.confirm({title:$rootScope.APPCONSTANTS.CANCELTITLE,template:$rootScope.DASHBOARDCONSTANTS.CANCELMESSAGE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res&&AppointmentService.cancelAppointment(appObj).then(function(result){if("0"===result[0].status){isSuccess=!0;var index=$scope.Appointments.indexOf(appObj);$scope.Appointments.splice(index,1),ionicToast.show($rootScope.DASHBOARDCONSTANTS.CANCELTEMPLATE,"middle",!1,2500),DataBaseService.removeAppointments(appObj)}}).catch(function(){})})},$scope.delayLoadingChat=function(){$timeout(function(){$state.go("app.chats")},800)},$scope.resheduleAppointment=function(appObj){var confirmPopup=$ionicPopup.confirm({title:$rootScope.APPCONSTANTS.RESCHEDULETITLE,template:$rootScope.DASHBOARDCONSTANTS.RESCHEDULETEMPLATE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res&&$state.go("app.book",{appointmentId:appObj.pc_eid,physicianId:appObj.uprovider_id})})},$scope.searchPhysicians=function(){$state.go("app.new",{searchString:$scope.searchString,viewAllStatus:!0})},$scope.detectDevice=function(visit){PatientVisitService.getPatientVisitDetails(visit.encounter).then(function(result){if(angular.forEach(result,function(visitObj){visitObj.PatientVisit&&($scope.Pdfhtml=visitObj.PatientVisit.pdf)}),""==$scope.Pdfhtml)ionicToast.show($rootScope.DASHBOARDCONSTANTS.VISITMESSAGE,"middle",!1,2500);else{var fileObj={dataType:"DATAURL",fileURL:$scope.Pdfhtml,fileName:"Visit",fileType:"pdf",visitId:visit.encounter,docName:"Visit"};CommanService.fileshare(fileObj,$scope)}}).catch(function(){}).finally(function(){$("#errorMsg").show()})},$scope.downloadAndOpenFile=function(visit){PatientVisitService.getPatientVisitDetails(visit.encounter).then(function(result){if(angular.forEach(result,function(visitObj){visitObj.PatientVisit&&($scope.Pdfhtml=visitObj.PatientVisit.pdf)}),""==$scope.Pdfhtml)ionicToast.show($rootScope.DASHBOARDCONSTANTS.VISITMESSAGE,"middle",!1,2500);else{var PdfData={dataType:"DATAURL",fileType:"pdf",fileURL:$scope.Pdfhtml,fileName:"Visit"};CommanService.fileDownload(PdfData)}}).catch(function(){}).finally(function(){$("#errorMsg").show()})};var isDate=function(date){return"Invalid Date"!==new Date(date)&&!isNaN(new Date(date))}}).filter("myLimitTo",[function(){return function(obj,limit){if("undefined"!=typeof obj){var keys=Object.keys(obj);if(keys.length<1)return[]}var ret=new Object,count=0;return angular.forEach(keys,function(key,arrayIndex){return!(count>=limit)&&(ret[key]=obj[key],void count++)}),ret}}]),angular.module("documentsModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.documents",{url:"/documents",params:{},cache:!1,views:{app:{templateUrl:"app/modules/documents/documents.html",controller:"documentsController"}}}).state("app.addDocuments",{url:"/addDocuments",params:{},cache:!0,views:{app:{templateUrl:"app/modules/documents/addDocuments.html",controller:"addDocumentsController"}}}).state("app.documentPreview",{url:"/documentPreview",params:{document:null,currentImageIndex:0},cache:!0,views:{app:{templateUrl:"app/modules/documents/documentPreview.html",controller:"documentPreviewController"}}}),$urlRouterProvider.otherwise("/documents")}]).directive("fileModel",["$parse",function($parse){return{restrict:"A",link:function(scope,element,attrs){var model,modelSetter;attrs.$observe("fileModel",function(fileModel){model=$parse(attrs.fileModel),modelSetter=model.assign}),element.bind("change",function(){scope.$apply(function(){modelSetter(scope.$parent,element[0].files[0])})})}}}]).filter("searchDocumentFor",function(){return function(arr,categoryName){if(!categoryName)return arr;var result=[];return categoryName=categoryName.toLowerCase(),angular.forEach(arr,function(item){item.name.toLowerCase()==categoryName.toLowerCase()&&result.push(item)}),result}}).controller("documentsController",function($scope,$rootScope,DocumentsService,$ionicPopup,$state,ionicToast,CommanService){function init(){$scope.patientDocConstants=$rootScope.PATIENTDOCUMENTSCONSTANTS,DocumentsService.getPatientDocument().then(function(result){$scope.categorydocuments=[],$rootScope.documents=[],angular.forEach(docConst,function(item){var category={};category.name=item.name,category.documents=[],angular.forEach(result,function(ditem){if(ditem.category_id==item.key){ditem.category_name=item.name;var matches=ditem.url.match(/\/([^\/?#]+)[^\/]*$/);matches.length>1&&(ditem.fileName=matches[1]);var docdate=new Date(ditem.date);ditem.docDate=docdate;var imageSource=ditem.url;ditem.imageUrl=imageSource;var type=ditem.fileName.split(".");ditem.docType=type[1],category.documents.push(ditem)}}),$scope.categorydocuments.push(category)})}).catch(function(e){}).finally(function(){$("#errorMsg").show()})}var docConst=$rootScope.PATIENTDOCUMENTSCONSTANTS.PATIENTDOCUMENTCATEGORY;$scope.categoryIndex=0,init(),$scope.deleteDocument=function(document,categoryIndex,documentIndex){var confirmPopup=$ionicPopup.confirm({title:$rootScope.PATIENTDOCUMENTSCONSTANTS.DELETETITLE,template:$rootScope.PATIENTDOCUMENTSCONSTANTS.DOCUMENTDELETEMESSAGE,cancelText:$rootScope.PATIENTDOCUMENTSCONSTANTS.CANCELTEXT,okText:$rootScope.PATIENTDOCUMENTSCONSTANTS.OKTEXT});confirmPopup.then(function(res){if(res){var documentObj={};documentObj.documentId=document.id,DocumentsService.deletePatientDocument(documentObj).then(function(result){"0"===result[0].status?(angular.forEach($scope.categorydocuments,function(categoryObj,categorykey){if(categorykey==categoryIndex){var index=categoryObj.documents.indexOf(document);categoryObj.documents.splice(index,1)}}),ionicToast.show($rootScope.PATIENTDOCUMENTSCONSTANTS.DELETEDOCUMENT,"bottom",!1,4e3)):ionicToast.show($rootScope.PATIENTDOCUMENTSCONSTANTS.DELETEDOCUMENTFAILED,"bottom",!1,4e3)}).catch(function(e){}).finally(function(){$("#errorMsg").show()})}})},$scope.downloadFile=function(doc){var fileObj={dataType:"URL",fileURL:doc.url,fileName:doc.category_name.replace(/\s/g,""),fileType:doc.mimetype};CommanService.fileDownload(fileObj)},$scope.ShowCategory=function(index){$scope.categoryIndex==index?$scope.categoryIndex=-1:$scope.categoryIndex=index},$scope.shareFile=function(document){var fileObj={dataType:"URL",fileURL:document.url,fileName:document.category_name.replace(/\s/g,""),fileType:document.mimetype,fileName:"Document"};CommanService.fileshare(fileObj,$scope)}}).controller("documentPreviewController",function($scope,$rootScope,$state,$stateParams,DocumentsService,ionicToast,$ionicPopup,DataBaseService,CommanService,$ionicLoading){$scope.document=$stateParams.document,$scope.documents=[],$scope.currentIndex=0,DataBaseService.getDocuments().then(function(result){angular.forEach(result,function(ditem){var matches=ditem.url.match(/\/([^\/?#]+)[^\/]*$/);matches.length>1&&(ditem.fileName=matches[1]);var docdate=new Date(ditem.date);ditem.docDate=docdate;var imageSource=ditem.url;ditem.imageUrl=imageSource;var type=ditem.fileName.split(".");if(ditem.docType=type[1],"png"==ditem.docType||"jpg"==ditem.docType||"jpeg"==ditem.docType){$scope.document.id==ditem.id&&$scope.currentIndex++;for(var index=0;index<$rootScope.PATIENTDOCUMENTSCONSTANTS.PATIENTDOCUMENTCATEGORY.length;index++)$rootScope.PATIENTDOCUMENTSCONSTANTS.PATIENTDOCUMENTCATEGORY[index].key==ditem.category_id&&(ditem.category_name=$rootScope.PATIENTDOCUMENTSCONSTANTS.PATIENTDOCUMENTCATEGORY[index].name);$scope.documents.push(ditem)}})}),$scope.nextSlide=function(){$scope.currentIndex<$scope.documents.length-1&&($ionicLoading.show($rootScope.APPCONSTANTS.LOADER),window.setTimeout(function(){$scope.document=$scope.documents[$scope.currentIndex],$scope.currentIndex=$scope.currentIndex+1,$ionicLoading.hide()},300))},$scope.prevSlide=function(){$scope.currentIndex>=1&&($ionicLoading.show($rootScope.APPCONSTANTS.LOADER),window.setTimeout(function(){$scope.currentIndex=$scope.currentIndex-1,
$scope.document=$scope.documents[$scope.currentIndex],$ionicLoading.hide()},300))},$scope.deleteDocument=function(document){var confirmPopup=$ionicPopup.confirm({title:$rootScope.PATIENTDOCUMENTSCONSTANTS.DELETETITLE,template:$rootScope.PATIENTDOCUMENTSCONSTANTS.DOCUMENTDELETEMESSAGE,cancelText:$rootScope.PATIENTDOCUMENTSCONSTANTS.CANCELTEXT,okText:$rootScope.PATIENTDOCUMENTSCONSTANTS.OKTEXT});confirmPopup.then(function(res){if(res){var documentObj={};documentObj.documentId=document.id,DocumentsService.deletePatientDocument(documentObj).then(function(result){"0"===result[0].status?(ionicToast.show($rootScope.PATIENTDOCUMENTSCONSTANTS.DELETEDOCUMENT,"bottom",!1,4e3),$state.go("app.documents")):(ionicToast.show($rootScope.PATIENTDOCUMENTSCONSTANTS.DELETEDOCUMENTFAILED,"bottom",!1,4e3),$state.go("app.documents"))}).catch(function(e){}).finally(function(){$("#errorMsg").show()})}})},$scope.IsSuccess=!1,$scope.shareFile=function(document){var fileObj={dataType:"URL",fileURL:document.url,fileName:document.category_name.replace(/\s/g,""),fileType:document.mimetype,fileName:"Document"};CommanService.fileshare(fileObj,$scope)},$scope.downloadFile=function(doc){var fileObj={dataType:"URL",fileURL:doc.url,fileName:doc.category_name.replace(/\s/g,""),fileType:doc.mimetype};CommanService.fileDownload(fileObj)}}).controller("addDocumentsController",function($scope,$rootScope,$cordovaCamera,DocumentsService,ionicToast,$state,DataBaseService){var docObj={};$scope.categoryId="",$scope.docCategory=$rootScope.PATIENTDOCUMENTSCONSTANTS.PATIENTDOCUMENTCATEGORY,$scope.takePhoto=function(){var options={quality:75,destinationType:Camera.DestinationType.DATA_URL,sourceType:Camera.PictureSourceType.CAMERA,allowEdit:!0,encodingType:Camera.EncodingType.JPEG,targetWidth:300,targetHeight:300,popoverOptions:CameraPopoverOptions,saveToPhotoAlbum:!1};$cordovaCamera.getPicture(options).then(function(imageData){document.getElementById("document-image").src="data:image/jpeg;base64,"+imageData,docObj.doc_Data=imageData,docObj.docType="png",docObj.mimeType="image/png"},function(err){})},$scope.docTypeError="",$scope.changeCategory=function(paramCategoryId){$scope.categoryId=paramCategoryId};var handleFileSelect=function(evt){var files=evt.target.files;if($scope.file=files[0],$scope.fileType=$scope.file.name.split("."),docObj.docType=$scope.fileType[1],docObj.mimeType=$scope.file.type,files&&$scope.file){var reader=new FileReader;reader.onload=function(readerEvt){var binaryString=readerEvt.target.result;docObj.doc_Data=btoa(binaryString)},reader.readAsBinaryString($scope.file)}};window.File&&window.FileReader&&window.FileList&&window.Blob?document.getElementById("filePicker").addEventListener("change",handleFileSelect,!1):(ionicToast.show($rootScope.PATIENTDOCUMENTSCONSTANTS.FILENOTSUPPORTED,"bottom",!1,4e3),$state.go("app.documents")),$scope.UploadDocument=function(){return $scope.docTypeError="",docObj.patientId=DataBaseService.getPatientId(),docObj.categoryId=$scope.categoryId,docObj.data=docObj.doc_Data,docObj.docDate=new Date,docObj.docType=docObj.docType,docObj.listId="doc-list",docObj.mimeType=docObj.mimeType,$scope.categoryId?docObj.data?void DocumentsService.addPatientDocument(docObj).then(function(result){ionicToast.show($rootScope.PATIENTDOCUMENTSCONSTANTS.DOCUPLOADSUCCESS,"bottom",!1,4e3),$state.go("app.documents")}):void($scope.docTypeError=$rootScope.PATIENTDOCUMENTSCONSTANTS.SELECTDOCUMENT):void($scope.docTypeError=$rootScope.PATIENTDOCUMENTSCONSTANTS.SELECTDOCUMENTTYPE)}}),angular.module("errorMessageModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.error",{url:"/error",params:{Error:null},cache:!1,views:{app:{templateUrl:"app/modules/errorMessage/errormessage.html",controller:"ErrorMessageController"}},authenticate:!0}),$urlRouterProvider.otherwise("/error")}]).controller("ErrorMessageController",function($scope,$state,$ionicLoading,$ionicHistory,ionicToast,$rootScope){$scope.errorMessage=$state.params.Error.status+" "+$state.params.Error.statusText,$scope.patientlogin=function(){$ionicLoading.show($rootScope.APPCONSTANTS.LOADER),localStorage.removeItem("patientfullName"),localStorage.removeItem("patientid"),localStorage.removeItem("searchString"),localStorage.removeItem("isRequestStarted"),$ionicHistory.clearCache().then(function(){$state.go("login")})},$scope.goBack=function(){$ionicHistory.goBack()},$scope.bugReport=function(){ionicToast.show($rootScope.ERRORMESSAGECONSTANTS.BUGREPORT,"middle",!1,2500)}}),angular.module("insuranceHistoryModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.insuranceHistory",{url:"/insuranceHistory",cache:!1,views:{app:{templateUrl:"app/modules/insuranceHistory/insuranceHistory.html",controller:"insuranceHistoryController"}},authenticate:!0}).state("app.updateInsurance",{url:"/insurance/updateInsurance",cache:!1,params:{scanCardData:null,insurance:null},views:{app:{templateUrl:"app/modules/insuranceHistory/updateInsurance/updateInsurance.html",controller:"UpdateInsuranceController"}},authenticate:!0}),$urlRouterProvider.otherwise("/insuranceHistory")}]).controller("insuranceHistoryController",function($scope,DataBaseService,InsuranceService,$rootScope,$state,ionicToast,$cordovaBarcodeScanner){function init(){InsuranceService.getInsurances().then(function(insuranceData){$scope.InsuranceData=insuranceData})}$scope.isbrowser=!1,"browser"==device.platform?$scope.isbrowser=!0:$scope.isbrowser=!1,$scope.scanInsuranceCard=function(insuranceType){$cordovaBarcodeScanner.scan().then(function(barcodeData){$state.go("app.updateInsurance",{scanCardData:barcodeData.text,insurance:insuranceType})},function(error){alert(error)},{preferFrontCamera:!0,showFlipCameraButton:!0,showTorchButton:!0,torchOn:!0,prompt:"Place a barcode inside the scan area",resultDisplayDuration:1500,orientation:"landscape",disableAnimations:!0})},init()}).controller("UpdateInsuranceController",function($scope,InsuranceService,CommanService,ionicDatePicker,$filter,$rootScope,$state,DataBaseService,ionicToast,$timeout){function Countries(){CommanService.getCountry().then(function(response){$scope.Countries=response.data,$scope.insurance&&$scope.statewiseCity()})}function init(){InsuranceService.getInsuranceCompanies().then(function(result){$scope.insuranceCompanies=result}),$state.params.insurance&&($scope.insurance=$state.params.insurance,$scope.isUpdateInsurance=!0),Countries()}$scope.scanCardData=$state.params.scanCardData,$scope.insuranceTypeList=[{Type:"primary"},{Type:"secondary"},{Type:"tertiary"}],$scope.genderList=["Male","Female"],$scope.relationList=["self","spouse","child","other"],$scope.insurance={},$scope.insuranceCompanies={},$scope.isUpdateInsurance=!1,init(),$scope.statewiseCity=function(){$scope.selectedCountry=$scope.Countries.filter(function(item){return item.countryISONAME==$scope.insurance.insuranceHolderCountry}),$scope.selectedCountry.length>0&&CommanService.getState($scope.selectedCountry[0].countryId).then(function(response){$scope.states=response})};var ipObj={callback:function(val){$scope.insurance.insuranceEffectiveDate=$filter("date")(new Date(val),"yyyy-MM-dd")},from:new Date(1970,1,1),inputDate:new Date,titleLabel:"Select a Date",setLabel:"Set",todayLabel:"Ok",closeLabel:"Close",mondayFirst:!0,weeksList:["S","M","T","W","T","F","S"],monthsList:["Jan","Feb","March","April","May","June","July","Aug","Sept","Oct","Nov","Dec"],templateType:"popup",to:new Date(2099,12,31),showTodayButton:!1,dateFormat:"MMM dd yyyy",closeOnSelect:!0,disableWeekdays:[]};$scope.openDatePicker=function(){ionicDatePicker.openDatePicker(ipObj)};var ipObjDob={callback:function(val){$scope.insurance.insuranceHolderDateOfBirth=$filter("date")(new Date(val),"yyyy-MM-dd")},from:new Date(1950,1,1),inputDate:new Date,titleLabel:"Select a Date",setLabel:"Set",todayLabel:"Ok",closeLabel:"Close",mondayFirst:!0,weeksList:["S","M","T","W","T","F","S"],monthsList:["Jan","Feb","March","April","May","June","July","Aug","Sept","Oct","Nov","Dec"],templateType:"popup",to:new Date(2099,12,31),showTodayButton:!1,dateFormat:"MMM dd yyyy",closeOnSelect:!0,disableWeekdays:[]};$scope.openDobDatePicker=function(){ionicDatePicker.openDatePicker(ipObjDob)},$scope.updateInsurance=function(insurance,form){return form.$invalid?void($scope.submitted=!0):void InsuranceService.updateInsuranceData(insurance).then(function(result){angular.forEach(result,function(res){"0"==res.status?(ionicToast.show($rootScope.INSURANCESCONSTANTS.UPDATEINSURANCEMESSAGE,"middle",!1,2500),DataBaseService.setInsurance(insurance),$timeout(function(){$state.go("app.insuranceHistory")},500)):ionicToast.show($rootScope.INSURANCESCONSTANTS.INSURANCEUPDATEFAILED,"middle",!1,3e3)})})}}),angular.module("mapModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.map",{url:"/map",cache:!1,params:{physician:null},views:{app:{templateUrl:"app/modules/map/map.html",controller:"MapController"}},authenticate:!0}),$urlRouterProvider.otherwise("/map")}]).controller("MapController",function($scope,$filter,$state,$ionicLoading,$rootScope,DataBaseService,sharedService,ionicToast){function init(){function initialize(mylocation,destination){directionsDisplay=new google.maps.DirectionsRenderer,directionsDisplay.setMap(map),calcRoute(mylocation,destination)}function calcRoute(mylocation,destination){var request={origin:mylocation,destination:destination,travelMode:"DRIVING"};directionsService.route(request,function(response,status){"OK"==status&&directionsDisplay.setDirections(response)})}$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var directionsDisplay,map,directionsService=new google.maps.DirectionsService,currentlocation=DataBaseService.getMyCurrentLocation();$scope.mylocation={},$scope.isMylocationFound=!0;try{mylocation=new google.maps.LatLng(currentlocation.latitude,currentlocation.longitude)}catch(e){$scope.isMylocationFound=!1,$scope.errorMessage="Please enable location service"}var geocoder=new google.maps.Geocoder,address=$state.params.physician.mainAddressLine1+" "+$state.params.physician.mainCity+" "+$state.params.physician.mainZip+" "+$state.params.physician.mainState,mapOptions={zoom:14,center:mylocation};map=new google.maps.Map(document.getElementById("map"),mapOptions),geocoder.geocode({address:address},function(results,status){if($ionicLoading.hide(),status==google.maps.GeocoderStatus.OK){var latitude=results[0].geometry.location.lat(),longitude=results[0].geometry.location.lng(),destination=new google.maps.LatLng(latitude,longitude);initialize(mylocation,destination)}else"browser"!=device.platform?sharedService.showNotification("Physician address not found"):ionicToast.show("Physician address not found","middle",!1,2500),$ionicLoading.hide()})}$scope.errorMessage="",init(),$scope.tryAgain=function(){document.addEventListener("deviceready",function(){$scope.errorMessage="",navigator.geolocation?navigator.geolocation.getCurrentPosition(function(p){DataBaseService.setMyCurrentLocation(p),init()},function(error){switch($scope.errorMessage="Please enable location service",error.code){case error.PERMISSION_DENIED:$scope.errorMessage="User denied the request for Geolocation.";break;case error.POSITION_UNAVAILABLE:$scope.errorMessage="Location information is unavailable.";break;case error.TIMEOUT:$scope.errorMessage="The request to get user location timed out.";break;case error.UNKNOWN_ERROR:$scope.errorMessage="An unknown error occurred."}}):$scope.errorMessage="Geo location not support for this device"})}}),angular.module("medicalHistoryModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.medicalHistory",{url:"/medicalHistory",params:{viewAllStatus:null},cache:!1,views:{app:{templateUrl:"app/modules/medicalHistory/medicalHistory.html",controller:"MedicalHistoryController"}},authenticate:!0}).state("app.addMedicalRecords",{url:"/addMedicalRecords",cache:!1,params:{addObject:null,type:null},views:{app:{templateUrl:function(urlattr){var Url="";if("vital"==urlattr.type)var Url="app/modules/medicalHistory/addMedicalRecordsTemplates/addVital.html";return"problem"==urlattr.type&&(Url="app/modules/medicalHistory/addMedicalRecordsTemplates/addProblem.html"),"surgery"==urlattr.type&&(Url="app/modules/medicalHistory/addMedicalRecordsTemplates/addSurgery.html"),"history"==urlattr.type&&(Url="app/modules/medicalHistory/addMedicalRecordsTemplates/addMedicalHistory.html"),"allergy"==urlattr.type&&(Url="app/modules/medicalHistory/addMedicalRecordsTemplates/addAllergies.html"),"medication"==urlattr.type&&(Url="app/modules/medicalHistory/addMedicalRecordsTemplates/addMedication.html"),"familyHistory"==urlattr.type&&(Url="app/modules/medicalHistory/addMedicalRecordsTemplates/addFamilyHistory.html"),"dental"==urlattr.type&&(Url="app/modules/medicalHistory/addMedicalRecordsTemplates/addDental.html"),"lifeStyle"==urlattr.type&&(Url="app/modules/medicalHistory/addMedicalRecordsTemplates/addLifeStyleHistory.html"),Url},controller:"addMedicalRecordsController"}},authenticate:!0}),$urlRouterProvider.otherwise("/medicalHistory")}]).controller("MedicalHistoryController",function($scope,$filter,$state,MedicalService,DataBaseService,ionicToast,CommanService,$rootScope){function init(){$scope.familyMedicalHistory={};var DiseaseName=[];$scope.medicalHistory=[],MedicalService.getMedicalHistory().then(function(result){$scope.VitalsData=result.vitalslist.length<=0?"":result.vitalslist,$scope.ProblemsData=result.problemlist.length<=0?"":result.problemlist,$scope.SurgeryData=result.surgerylist.length<=0?"":result.surgerylist,$scope.DentalData=result.dentallist.length<=0?"":result.dentallist,$scope.AllergyData=result.allergylist.length<=0?"":result.allergylist,$scope.medicalHistory=result.history,$scope.familyMedicalHistory.Father=""==$scope.medicalHistory[0].Father?"":$scope.medicalHistory[0].Father,$scope.familyMedicalHistory.Mother=""==$scope.medicalHistory[0].Mother?"":$scope.medicalHistory[0].Mother,$scope.familyMedicalHistory.Spouse=""==$scope.medicalHistory[0].Spouse?"":$scope.medicalHistory[0].Spouse,$scope.familyMedicalHistory.Siblings=""==$scope.medicalHistory[0].Siblings?"":$scope.medicalHistory[0].Siblings,$scope.familyMedicalHistory.Offspring=""==$scope.medicalHistory[0].Offspring?"":$scope.medicalHistory[0].Offspring;var Alcohol=$scope.medicalHistory[0].Alcohol.split("|");$scope.statusAlcohol=""==Alcohol[0]?"":Alcohol[0];var exercise=$scope.medicalHistory[0].ExercisePatterns.split("|");$scope.statusExecise=""==exercise[0]?"":exercise[0];var tobacco=$scope.medicalHistory[0].Tobacco.split("|");tobacco.length>0&&($scope.statusTobacco=""==tobacco[3]?tobacco[3]:tobacco[0]),angular.forEach($scope.medicalHistory[0].Usertext.split("|"),function(result){""!=result&&DiseaseName.push({DiseaseName:result})}),$scope.pastHistory=DiseaseName.length<=0?"":DiseaseName,$scope.noDataFound=$rootScope.MEDICALRECORDSCONSTANTS.NOMEDICALRECORDSFOUND})}$scope.selectAll=!1,init(),$scope.showSelectedTab=function(index){$scope.showTab==index?$scope.showTab=-1:$scope.showTab=index},$scope.functionSelectAll=function(status){return void 0!==status&&($scope.checkboxModel={value1:status},$scope.checkboxModel2={value1:status},$scope.checkboxModel3={value1:status},$scope.checkboxModel4={value1:status},$scope.checkboxModel5={value1:status},$scope.checkboxModel6={value1:status},$scope.checkboxModel7={value1:status},$scope.checkboxModel8={value1:status},$scope.checkboxModel9={value1:status},void($scope.checkboxModel10={value1:status}))},$scope.selectCheckBox=function(){0===$('input[type="checkbox"]:checked').length?$scope.selectAll=!1:$scope.selectAll=!0},$scope.checkSection=function(){$scope.selectAll=!$scope.selectAll,$scope.functionSelectAll($scope.selectAll)},$scope.downloadPdf=function(){$scope.selectAll&&MedicalService.getMedicalHistory().then(function(result){var PdfData={dataType:"DATAURL",fileType:"pdf",fileURL:result.pdf,fileName:"MedicalHistory"};CommanService.fileDownload(PdfData)})},$scope.sharePDF=function(){$scope.selectAll&&MedicalService.getMedicalHistory().then(function(result){var PdfData={dataType:"DATAURL",fileType:"pdf",fileURL:result.pdf,fileName:"MedicalHistory"};CommanService.fileshare(PdfData,$scope)})}}).filter("cmdate",["$filter",function($filter){return function(input,format){return $filter("date")(new Date(input),format)}}]).controller("addMedicalRecordsController",function($scope,$stateParams,MedicalService,ionicDatePicker,$filter,$state,ionicToast,DataBaseService,$rootScope){function init(){$scope.tempLocation=["Oral","Tymphic Membrane","Rectal","Axillary","Temporal Artery"],$scope.occuranceList=[{occName:"Unknown or N/A",occKey:"0"},{occName:"First",occKey:"2"},{occName:"Early recurrence(<2 Mo)",occKey:"6"},{occName:"Late recurrence(2-12 Mo)",occKey:"7"},{occName:"Delayed recurrence(>12 Mo)",occKey:"8"},{occName:"Chronic/Recurrent",occKey:"4"},{occName:"Acute on Chronic",occKey:"5"}],$scope.outcomeList=[{outName:"Null",outKey:"0"},{outName:"Resolved",outKey:"1"},{outName:"Improved",outKey:"2"},{outName:"Status quo",outKey:"3"},{outName:"Worse",outKey:"4"},{outName:"Pending followup",outKey:"5"}],$scope.serverityList=["Unassigned","Mild","Mild to Moderate","Moderate","Moderate to Severe","Severe","Life Threatning Severity","Fatal"],$scope.reactionList=["Shortness of Breath","Unassigned","Hives","Nausea"],$scope.seatBeltUses=["Always","Sometime","Never"]}function roundNumber(number,precision){precision=Math.abs(parseInt(precision))||0;var multiplier=Math.pow(10,precision);return Math.round(number*multiplier)/multiplier}$scope.loadMedicalRecordForm=$stateParams.type,$scope.mainObject=$stateParams.addObject,init(),$scope.vital={},$scope.problem={},$scope.surgery={},$scope.dental={},$scope.allergy={},$scope.lifeStyle={},$scope.History={},$scope.selectedDiseases=[],$scope.convertLbsToKg=function(lbsValue){""==lbsValue?$scope.vital.weightKg="":$scope.vital.weightKg=Math.round(.45359237*lbsValue*100)/100},$scope.convertKgToLbs=function(KgValue){if(""==KgValue)$scope.vital.Weight="";else{var wtval=KgValue/.45359237;$scope.vital.Weight=Math.round(100*wtval)/100}},$scope.convertInToCm=function(inValue){if(""==inValue)$scope.vital.heightCm="";else{var htvalcm=2.54*inValue,htroundcm=Math.round(100*htvalcm)/100;$scope.vital.heightCm=roundNumber(htroundcm,1)}},$scope.convertCmToIn=function(cmValue){if(""==cmValue)$scope.vital.Height="";else{var htvalin=cmValue*(1/2.54);$scope.vital.Height=Math.round(100*htvalin)/100}},$scope.convertFToC=function(fahrenheitValue){if(""==fahrenheitValue)$scope.vital.tempC="";else{var fahrenheitval=Math.round((fahrenheitValue-32)*(5/9)*100)/100;$scope.vital.tempC=roundNumber(fahrenheitval,1)}},$scope.convertCToF=function(celciusValue){""==celciusValue?$scope.vital.Temperature="":$scope.vital.Temperature=Math.round(100*(1.8*celciusValue+32))/100},$scope.convertHeadCircInToCm=function(inValue){if(""==inValue)$scope.vital.headCircCm="";else{var htvalcm=2.54*inValue,htroundcm=Math.round(100*htvalcm)/100;$scope.vital.headCircCm=roundNumber(htroundcm,1)}},$scope.convertHeadCircCmToIn=function(cmValue){if(""==cmValue)$scope.vital.Headcirc="";else{var htvalin=cmValue*(1/2.54);$scope.vital.Headcirc=Math.round(100*htvalin)/100}},$scope.convertWaistCircInToCm=function(inValue){if(""==inValue)$scope.vital.waistCircCm="";else{var htvalcm=2.54*inValue,htroundcm=Math.round(100*htvalcm)/100;$scope.vital.waistCircCm=roundNumber(htroundcm,1)}},$scope.convertWaistCircCmToIn=function(cmValue){if(""==cmValue)$scope.vital.Waistcirc="";else{var htvalin=cmValue*(1/2.54);$scope.vital.Waistcirc=Math.round(100*htvalin)/100}},$scope.calculateBMI=function(vitalsData){$scope.vital.Bmi=roundNumber(703*vitalsData.Weight/(vitalsData.Height*vitalsData.Height),1)};var ipObj={callback:function(val){$scope.problem.Begdate=$filter("date")(new Date(val),"yyyy-MM-dd"),$scope.surgery.Begdate=$filter("date")(new Date(val),"yyyy-MM-dd"),$scope.date=$filter("date")(new Date(val),"yyyy-MM-dd"),$scope.time=$filter("date")(new Date,"HH:mm:ss"),$scope.vital.Vitalsdate=$scope.date+" "+$scope.time,$scope.dental.Begdate=$filter("date")(new Date(val),"yyyy-MM-dd"),$scope.allergy.Begdate=$filter("date")(new Date(val),"yyyy-MM-dd")},from:new Date(1970,1,1),inputDate:new Date,titleLabel:"Select a Date",setLabel:"Set",todayLabel:"Ok",closeLabel:"Close",mondayFirst:!0,weeksList:["S","M","T","W","T","F","S"],monthsList:["Jan","Feb","March","April","May","June","July","Aug","Sept","Oct","Nov","Dec"],templateType:"popup",to:new Date(2099,12,31),showTodayButton:!1,dateFormat:"MMM dd yyyy",closeOnSelect:!0,disableWeekdays:[]};$scope.openDatePicker=function(){ionicDatePicker.openDatePicker(ipObj)};var ipObjendDate={callback:function(val){$scope.problem.Enddate=$filter("date")(new Date(val),"yyyy-MM-dd"),$scope.surgery.Enddate=$filter("date")(new Date(val),"yyyy-MM-dd"),$scope.dental.Enddate=$filter("date")(new Date(val),"yyyy-MM-dd"),$scope.allergy.Enddate=$filter("date")(new Date(val),"yyyy-MM-dd")},from:new Date(1970,1,1),inputDate:new Date,titleLabel:"Select a Date",setLabel:"Set",todayLabel:"Ok",closeLabel:"Close",mondayFirst:!0,weeksList:["S","M","T","W","T","F","S"],monthsList:["Jan","Feb","March","April","May","June","July","Aug","Sept","Oct","Nov","Dec"],templateType:"popup",to:new Date(2099,12,31),showTodayButton:!1,dateFormat:"MMM dd yyyy",closeOnSelect:!0,disableWeekdays:[]};$scope.openDatePickerEndDate=function(){ionicDatePicker.openDatePicker(ipObjendDate)},$scope.addVitals=function(vitalsObj){void 0==vitalsObj.Vitalsdate||void 0==vitalsObj.Weight||void 0==vitalsObj.Height||void 0==vitalsObj.Bps||void 0==vitalsObj.Bpd||void 0==vitalsObj.Pulse||void 0==vitalsObj.Respiration||void 0==vitalsObj.Bmi?ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ENTERREQUIREDFIELD,"middle",!1,3500):MedicalService.addPatientVitals(vitalsObj).then(function(result){"0"==result[0].status&&(ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ADDRECORDMESSAGE,"middle",!1,3500),DataBaseService.setMedicalHistoryVitals(vitalsObj),$state.go("app.medicalHistory"))})},$scope.addProblems=function(problemObj){if(problemObj.formType="medical_problem",$scope.occuranceID="",$scope.outcomeID="",$scope.errorMsg="",void 0==problemObj.Diagnosis||void 0==problemObj.Title||void 0==problemObj.Begdate||void 0==problemObj.Outcome)ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ENTERREQUIREDFIELD,"middle",!1,3500);else{if(problemObj.Begdate>problemObj.Enddate)return void($scope.errorMsg=$rootScope.MEDICALRECORDSCONSTANTS.STARTENDDATECOMPARE);MedicalService.addPatientRecords(problemObj).then(function(result){"0"==result[0].status&&(ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ADDRECORDMESSAGE,"middle",!1,3500),DataBaseService.setMedicalProblems(problemObj),$state.go("app.medicalHistory"))})}},$scope.addSurgery=function(surgeryObj){if($scope.occuranceID="",$scope.outcomeID="",surgeryObj.formType="surgery",void 0==surgeryObj.Diagnosis||void 0==surgeryObj.Title||void 0==surgeryObj.Begdate||void 0==surgeryObj.Outcome)ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ENTERREQUIREDFIELD,"middle",!1,3500);else{if(surgeryObj.Begdate>surgeryObj.Enddate)return void($scope.errorMsg=$rootScope.MEDICALRECORDSCONSTANTS.STARTENDDATECOMPARE);MedicalService.addPatientRecords(surgeryObj).then(function(surgeryResult){angular.forEach(surgeryResult,function(result){"0"==result.status&&(ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ADDRECORDMESSAGE,"middle",!1,3500),DataBaseService.setMedicalSurgery(surgeryObj),$state.go("app.medicalHistory"))})})}},$scope.addDental=function(DentalObj){if($scope.occuranceID="",$scope.outcomeID="",DentalObj.formType="dental",void 0==DentalObj.Diagnosis||void 0==DentalObj.Title||void 0==DentalObj.Begdate||void 0==DentalObj.Outcome)ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ENTERREQUIREDFIELD,"middle",!1,3500);else{if(DentalObj.Begdate>DentalObj.Enddate)return void($scope.errorMsg=$rootScope.MEDICALRECORDSCONSTANTS.STARTENDDATECOMPARE);MedicalService.addPatientRecords(DentalObj).then(function(dentalResult){angular.forEach(dentalResult,function(result){"0"==result.status&&(ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ADDRECORDMESSAGE,"middle",!1,3500),DataBaseService.setDetalHistory(DentalObj),$state.go("app.medicalHistory"))})})}},$scope.addAllergy=function(allergyObj){return allergyObj.formType="allergy",allergyObj.Begdate>allergyObj.Enddate?void($scope.errorMsg=$rootScope.MEDICALRECORDSCONSTANTS.STARTENDDATECOMPARE):void MedicalService.addPatientRecords(allergyObj).then(function(allergyResult){angular.forEach(allergyResult,function(result){"0"==result.status&&(ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ADDRECORDMESSAGE,"middle",!1,3500),DataBaseService.setAllergyHistory(allergyObj),$state.go("app.medicalHistory"))})})},$scope.toggleSelection=function(dn){var idx=$scope.selectedDiseases.indexOf(dn);idx>-1?$scope.selectedDiseases.splice(idx,1):$scope.selectedDiseases.push(dn),$scope.DiseasesName=[],angular.forEach($scope.selectedDiseases,function(result){$scope.DiseasesName.push({DiseaseName:result})})},$scope.addHistory=function(history){MedicalService.addSelfMedicalHistory($scope.DiseasesName,history.notes).then(function(historyResult){ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ADDRECORDMESSAGE,"middle",!1,3500),console.log(result)})},$scope.addFamilyHistory=function(mainObject){MedicalService.addUpdateFamilyHistory(mainObject).then(function(FamilyHistoryResult){angular.forEach(FamilyHistoryResult,function(result){"0"==result.status&&(ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ADDRECORDMESSAGE,"middle",!1,3500),DataBaseService.setMedicalHistory(mainObject),$state.go("app.medicalHistory"))})})},$scope.addLifeStyleHistory=function(lifeStyleobj){MedicalService.updatelifeStyleHistory(lifeStyleobj).then(function(lifeStyleResult){angular.forEach(lifeStyleResult,function(result){"0"==result.status&&(ionicToast.show($rootScope.MEDICALRECORDSCONSTANTS.ADDRECORDMESSAGE,"middle",!1,3500),DataBaseService.setMedicalHistory(lifeStyleobj),$state.go("app.medicalHistory"))})})},$scope.diseaseName=["Vericose vein","Hypertension","Diabetes","Sickle cell","Fibroids","PID(Pelvic Inflammatory Disease)","Severe Migraine","Heart Disease","Thrombosis/Stroke","Hepatitis","Gall Bladder Condition","Breast Disease","Depression","Allergies","Infertility","Asthma","Epilepsy","Contact Lenses","Contraceptive Complication (specify)","Other (specify)"],$scope.relationToPatient=["Father","Mother","Wife","Sister","Brother","Son","Daugher","Child","Spouse","Husband","Grandfather","Grandmother","Other"],$scope.smokeExposure=["Unassigned","Current every day smoker","Current some day smoker","Former smoker","Never smoker","Smoker, current status unknown","Unknown if ever smoked","Heavy tobacco smoker","Light tobacco smoker"]}),angular.module("myDeviceModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.mydevices",{url:"/mydevice",views:{app:{templateUrl:"app/modules/myDevices/myDevice.html",controller:"MyDeviceController"}},authenticate:!0}).state("app.fitbitlogin",{url:"/fitbitlogin",views:{app:{templateUrl:"app/modules/myDevices/fitbitLogin.html",controller:"FitbitLoginController"}},authenticate:!0}).state("app.fitbitdetails",{url:"/fitbitdetails",views:{app:{templateUrl:"app/modules/myDevices/fitbitDetails.html",controller:"FitbitDetailsController"}},authenticate:!0}).state("app.googlefitlogin",{url:"/googlefitlogin",views:{app:{templateUrl:"app/modules/myDevices/googlefitLogin.html",controller:"GooglefitLoginController"}},authenticate:!0}).state("app.googlefitdetails",{url:"/googlefitdetails",views:{app:{templateUrl:"app/modules/myDevices/googlefitDetails.html",controller:"GooglefitDetailsController"}},authenticate:!0}).state("app.jawbonelogin",{url:"/jawbonelogin",views:{app:{templateUrl:"app/modules/myDevices/jawboneLogin.html",controller:"JawboneLoginController"}},authenticate:!0}).state("app.jawbonedetails",{url:"/jawbonedetails",views:{app:{templateUrl:"app/modules/myDevices/jawboneDetails.html",controller:"JawboneDetailsController"}},authenticate:!0}).state("app.misfitlogin",{url:"/misfitlogin",views:{app:{templateUrl:"app/modules/myDevices/misfitLogin.html",controller:"MisfitLoginController"}},authenticate:!0}).state("app.misfitdetails",{url:"/misfitdetails",views:{app:{templateUrl:"app/modules/myDevices/misfitDetails.html",controller:"MisfitDetailsController"}},authenticate:!0}).state("app.runkeeperlogin",{url:"/runkeeperlogin",views:{app:{templateUrl:"app/modules/myDevices/runkeeperLogin.html",controller:"RunkeeperLoginController"}},authenticate:!0}).state("app.runkeeperdetails",{url:"/runkeeperdetails",views:{app:{templateUrl:"app/modules/myDevices/runkeeperDetails.html",controller:"RunkeeperDetailsController"}},authenticate:!0}).state("app.withingslogin",{url:"/withingslogin",views:{app:{templateUrl:"app/modules/myDevices/withingsLogin.html",controller:"WithingsLoginController"}},authenticate:!0}).state("app.withingsdetails",{url:"/withingsdetails",views:{app:{templateUrl:"app/modules/myDevices/withingsDetails.html",controller:"WithingsDetailsController"}},authenticate:!0}),$urlRouterProvider.otherwise("/mydevice")}]).controller("MyDeviceController",function($scope,$filter,$state,$ionicPopup){}).controller("FitbitLoginController",function($scope,$filter,$state,$ionicPopup){}).controller("FitbitDetailsController",function($scope,$filter,$state,$ionicPopup){}).controller("GooglefitLoginController",function($scope,$filter,$state,$ionicPopup){}).controller("GooglefitDetailsController",function($scope,$filter,$state,$ionicPopup){}).controller("JawboneLoginController",function($scope,$filter,$state,$ionicPopup){}).controller("JawboneDetailsController",function($scope,$filter,$state,$ionicPopup){}).controller("MisfitLoginController",function($scope,$filter,$state,$ionicPopup){}).controller("MisfitDetailsController",function($scope,$filter,$state,$ionicPopup){}).controller("RunkeeperLoginController",function($scope,$filter,$state,$ionicPopup){}).controller("RunkeeperDetailsController",function($scope,$filter,$state,$ionicPopup){}).controller("WithingsLoginController",function($scope,$filter,$state,$ionicPopup){}).controller("WithingsDetailsController",function($scope,$filter,$state,$ionicPopup){}),angular.module("patientReminderModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.patientReminder",{url:"/patientReminder",cache:!1,views:{app:{templateUrl:"app/modules/patientReminder/patientReminder.html",controller:"PatientReminderController"}},authenticate:!0}).state("app.reminderDetails",{url:"/reminderDetails",params:{reminder:null},views:{app:{templateUrl:"app/modules/patientReminder/reminderDetails.html",controller:"reminderDetailsController"}},authenticate:!0}),$urlRouterProvider.otherwise("/patientReminder")}]).filter("subString",function(){return function(str,start,end){if(void 0!=str)return str.substr(start,end)}}).directive("showMore",[function(){return{restrict:"AE",replace:!0,scope:{text:"=",limit:"="},template:'<div><p class="sub-title white-space" ng-show="largeText"> {{ text | subString :0 :end }} <a href="javascript:;" ng-click="showMore()" ng-show="isShowMore">...Show More</a><a href="javascript:;" ng-click="showLess()" ng-hide="isShowMore">Show Less </a></p><p class="sub-title white-space" ng-hide="largeText">{{ text }}</p></div> ',link:function(scope,iElement,iAttrs){scope.end=scope.limit,scope.isShowMore=!0,scope.largeText=!0,scope.text.length<=scope.limit&&(scope.largeText=!1),scope.showMore=function(){scope.end=scope.text.length,scope.isShowMore=!1},scope.showLess=function(){scope.end=scope.limit,scope.isShowMore=!0}}}}]).controller("PatientReminderController",function($scope,$rootScope,MessageService,$filter,DataBaseService,$state,NotificationService){
function init(){NotificationService.getNotification(notificationParam).then(function(result){$rootScope.patientReminders=result}).catch(function(e){$rootScope.patientReminders=[]}).finally(function(){})}$scope.showDelete=!1;var patientId=DataBaseService.getPatientId(),notificationParam={};notificationParam.pid=patientId,notificationParam.isData=1,init(),$scope.$on("notificationEvent",function(e){init()}),$scope.delete=function(reminder){NotificationService.deleteNotification(reminder).then(function(result){if("0"===result[0].status){isSuccess=!0;var index=$rootScope.patientReminders.indexOf(reminder);$rootScope.patientReminders.splice(index,1)}}).catch(function(e){console.log(e)}).finally(function(){})},$scope.reminderDetails=function(patientReminder){"0"!=patientReminder.isRead?$state.go("app.reminderDetails",{reminder:patientReminder}):NotificationService.readNotification(patientReminder.dr_id).then(function(result){patientReminder.isRead=!0,DataBaseService.updateNotification(patientReminder),$rootScope.Notification=$rootScope.Notification-1,$state.go("app.reminderDetails",{reminder:patientReminder})}).catch(function(e){}).finally(function(){})}}).controller("reminderDetailsController",function($scope,$state,NotificationService,$rootScope){$scope.reminder=$state.params.reminder,$scope.delete=function(reminder){NotificationService.deleteNotification(reminder).then(function(result){if("0"===result[0].status){isSuccess=!0;var index=$rootScope.patientReminders.indexOf(reminder);$rootScope.patientReminders.splice(index,1),$state.go("app.patientReminder")}}).catch(function(e){console.log(e)}).finally(function(){})}}),angular.module("physicianProfileModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.physicianProfile",{url:"/physicianProfile",params:{physician:null,physicianId:null},cache:!0,views:{app:{templateUrl:"app/modules/physicianprofile/physicianProfile.html",controller:"physicianProfileController"}},authenticate:!0}),$urlRouterProvider.otherwise("/physicianProfile")}]).controller("physicianProfileController",function($scope,$stateParams,PhysicianService,$state){function setPhysician(physician){$scope.physician=physician,$scope.physicianId=physician.id;var address=$scope.physician.mainAddressLine1+", "+$scope.physician.mainCity+", "+$scope.physician.mainState;geocoder.geocode({address:address},function(results,status){if(status==google.maps.GeocoderStatus.OK){var latitude=results[0].geometry.location.lat(),longitude=results[0].geometry.location.lng();localStorage.setItem("physicianlat",latitude),localStorage.setItem("physicianlng",longitude);JSON.parse(localStorage.getItem("latLng"));$scope.distance=0}})}function onSuccess(result){console.log("Success:"+result)}function onError(result){console.log("Error:"+result)}var geocoder=new google.maps.Geocoder;$scope.physicianId=0,$state.params.physician?setPhysician($state.params.physician):PhysicianService.getPhysician($state.params.physicianId).then(function(result){setPhysician(result[0]),console.log(result[0])}),$scope.callNumber=function(number){window.plugins.CallNumber.callNumber(onSuccess,onError,number,!1)},$scope.composeEmail=function(){var onSuccess=function(result){},onError=function(msg){};window.plugins.socialsharing.shareViaEmail("Message","Subject",["support@compumatrice.com"],null,null,null,onSuccess,onError)}}),angular.module("profileSettingModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.profileSetting",{url:"/profileSetting",params:{status:null},cache:!1,views:{app:{templateUrl:"app/modules/profilesetting/profileSetting.html",controller:"profileSettingController"}},authenticate:!0}).state("app.profileEdit",{url:"/edit",views:{app:{templateUrl:"app/modules/profilesetting/editprofile.html",controller:"profileEditController"}},authenticate:!0}),$urlRouterProvider.otherwise("/profileSetting")}]).controller("profileSettingController",function($scope,$rootScope,$ionicActionSheet,MedicalService,$filter,$state,$cordovaCamera,DataBaseService,PatientProfileService,CommanService){function init(){PatientProfileService.getPatientProfile().then(function(result){$scope.profileData=result}).catch(function(e){}).finally(function(){})}var imgObj={};$scope.takePhoto=function(){var options={quality:75,destinationType:Camera.DestinationType.DATA_URL,sourceType:Camera.PictureSourceType.CAMERA,allowEdit:!0,encodingType:Camera.EncodingType.JPEG,targetWidth:300,targetHeight:300,popoverOptions:CameraPopoverOptions,saveToPhotoAlbum:!1};$cordovaCamera.getPicture(options).then(function(imageData){document.getElementById("profile-image").src="data:image/jpeg;base64,"+imageData,imgObj.patientId=DataBaseService.getPatientId(),imgObj.image_data=imageData,PatientProfileService.updatePatientProfileImage(imgObj).then(function(result){}),$rootScope.profileimgUrl="data:image/jpeg;base64,"+imageData},function(err){})},init()}).controller("profileEditController",function($scope,$rootScope,$state,MedicalService,$filter,ionicDatePicker,DataBaseService,ionicToast,PatientProfileService,CommanService){function init(){$scope.genderList=["Male","Female"],PatientProfileService.getPatientProfile().then(function(result){$scope.DemographicsData=result,$scope.Countries()})}init();var ipObj={callback:function(val){$scope.DemographicsData[0].DateOfBirth=$filter("date")(val,"yyyy-MM-dd")},disabledDates:[],from:new Date(1970,1,1),to:new Date(2080,10,30),inputDate:new Date,mondayFirst:!0,disableWeekdays:[],closeOnSelect:!0,templateType:"popup",showTodayButton:!1,dateFormat:$rootScope.APPCONSTANTS.DATEFORMAT};$scope.openDatePicker=function(){ionicDatePicker.openDatePicker(ipObj)},$scope.Countries=function(){CommanService.getCountry().then(function(response){$scope.Countries=response.data,$scope.DemographicsData.CountryName&&($scope.selectedCountry=$scope.Countries.filter(function(item){return item.countryISONAME==$scope.DemographicsData.CountryName}),$scope.statewiseCity())})},$scope.statewiseCity=function(){$scope.selectedCountry=$scope.Countries.filter(function(item){return item.countryISONAME==$scope.DemographicsData.CountryName}),$scope.selectedCountry&&CommanService.getState($scope.selectedCountry[0].countryId).then(function(response){$scope.states=response})},$scope.save=function(data){PatientProfileService.updatePatientProfile(data).then(function(result){"0"===result[0].status?(isSuccess=!0,ionicToast.show($rootScope.PATIENTPROFILECONSTANTS.PROFILEUPDATESUCCESS,"bottom",!1,4e3),$state.go("app.profileSetting",{status:1})):(ionicToast.show($rootScope.PATIENTPROFILECONSTANTS.PROFILEUPDATEFAILED,"bottom",!1,4e3),$state.go("app.profileSetting"))})}}),angular.module("reportsModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.reports",{url:"/reports",cache:!1,views:{app:{templateUrl:"app/modules/reports/reports.html",controller:"ReportsController"}},authenticate:!0}),$urlRouterProvider.otherwise("/reports")}]).controller("ReportsController",function($scope,$rootScope,$timeout,ReportService,ionicDatePicker,$filter,DataBaseService,CommanService){var format="MM/dd/yyyy";$scope.recordType="",$scope.ccrError="",$scope.ccdError="",$scope.dateRange={},$scope.dateRange.dateRangeCcr=!1,$scope.dateRange.dateRangeCcd=!1;var startccrObj={callback:function(val){$scope.openccrStartDate=$filter("date")(val,format)},disabledDates:[],to:new Date,inputDate:new Date,mondayFirst:!0,closeOnSelect:!0,templateType:"popup",showTodayButton:!1,dateFormat:"MMM dd yyyy"},endccrObj={callback:function(val){$scope.openccrEndDate=$filter("date")(val,format)},disabledDates:[],to:new Date,inputDate:new Date,mondayFirst:!0,closeOnSelect:!0,templateType:"popup",showTodayButton:!1};$scope.openCcrStartDatePicker=function(){$scope.ccrError="",ionicDatePicker.openDatePicker(startccrObj)},$scope.openCcrEndDatePicker=function(){$scope.ccrError="",ionicDatePicker.openDatePicker(endccrObj)},$scope.ccrCcd=function(value){var report={};if("ccr"==value||"ccrshare"==value)if($scope.ccrError="",$scope.dateRange.dateRangeCcr)if($scope.openccrStartDate&&$scope.openccrEndDate){if(new Date($scope.openccrStartDate)>new Date($scope.openccrEndDate))return void($scope.ccrError=$rootScope.REPORTSCONSTANTS.DATECOMPARE);report.show_date=$scope.dateRange.dateRangeCcr,report.Start=$scope.openccrStartDate,report.End=$scope.openccrEndDate,report.pateint_Id=DataBaseService.getPatientId(),report.ccrAction="generate",report.raw="pure",ReportService.generateReport(report).then(function(result){var fileData={dataType:"URL",fileType:"zip",fileURL:result[0].zipfilePath,fileName:"CCR"};"ccrshare"==value?CommanService.fileshare(fileData,$scope):CommanService.fileDownload(fileData)}).catch(function(e){console.log(e)}).finally(function(){$("#errorMsg").show()})}else{if(!$scope.openccrStartDate&&!$scope.openccrEndDate)return void($scope.ccrError=$rootScope.REPORTSCONSTANTS.SELECTDATE);if(!$scope.openccrStartDate)return void($scope.ccrError=$rootScope.REPORTSCONSTANTS.SELECTSTARTDATE);if(!$scope.openccrEndDate)return void($scope.ccrError=$rootScope.REPORTSCONSTANTS.SELECTENDDATE)}else report.pateint_Id=DataBaseService.getPatientId(),report.ccrAction="generate",report.raw="pure",report.Start="",report.End="",report.show_date=!1,ReportService.generateReport(report).then(function(result){var fileData={dataType:"URL",fileType:"zip",fileURL:result[0].zipfilePath,fileName:"CCR"};"ccrshare"==value?CommanService.fileshare(fileData,$scope):CommanService.fileDownload(fileData)}).catch(function(e){console.log(e)}).finally(function(){$("#errorMsg").show()});else"ccd"!=value&&"ccdshare"!=value||(report.pateint_Id=DataBaseService.getPatientId(),report.ccrAction="viewccd",report.raw="pure",report.Start="",report.End="",report.show_date=!1,ReportService.generateReport(report).then(function(result){var fileData={dataType:"URL",fileType:"zip",fileURL:result[0].zipfilePath,fileName:"CCD"};"ccdshare"==value?CommanService.fileshare(fileData,$scope):CommanService.fileDownload(fileData)}).catch(function(e){console.log(e)}).finally(function(){$("#errorMsg").show()}))},$scope.checkCcrError=function(){$scope.ccrError="",$scope.openccrStartDate="",$scope.openccrEndDate=""},$scope.checkCcdError=function(){$scope.ccdError="",$scope.openccdStartDate="",$scope.openccdEndDate=""},$scope.generateMedicalReport=function(){var patientMedicalRecord={};patientMedicalRecord.type="MHistory,MMedication,MProblem,MAllergy,MDental,MSurgery,MVitals",patientMedicalRecord.patientID=DataBaseService.getPatientId(),ReportService.generateMedicalReport(patientMedicalRecord).then(function(result){var PdfData={dataType:"DATAURL",fileType:"pdf",fileURL:result[0].pdf,fileName:"MedicalHistory"};CommanService.fileDownload(PdfData)}).catch(function(e){console.log(e)}).finally(function(){})},$scope.sharePDF=function(){var patientMedicalRecord={};patientMedicalRecord.type="MHistory,MMedication,MProblem,MAllergy,MDental,MSurgery,MVitals",patientMedicalRecord.patientID=DataBaseService.getPatientId(),ReportService.generateMedicalReport(patientMedicalRecord).then(function(result){var PdfData={dataType:"DATAURL",fileType:"pdf",fileURL:result[0].pdf,fileName:"MedicalHistory"};CommanService.fileshare(PdfData,$scope)})}}),angular.module("secureMessageModule",[]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("app.Message",{url:"/Message",cache:!1,views:{app:{templateUrl:"app/modules/secureMessaging/secureMessaging.html",controller:"InboxMessageController"}},authenticate:!0}).state("app.inboxDetail",{url:"/InboxDetail",cache:!1,params:{MessageData:null,Body:null},views:{app:{templateUrl:"app/modules/secureMessaging/Inbox/InboxDetails.html",controller:"InboxMessageDetailsController"}},authenticate:!0}).state("app.sentMessage",{url:"/Sent",cache:!1,views:{app:{templateUrl:"app/modules/secureMessaging/Sent/Sent.html",controller:"SentMessageController"}},authenticate:!0}).state("app.sentDetail",{url:"/SentDetail",params:{MessageData:null,Body:null},views:{app:{templateUrl:"app/modules/secureMessaging/Sent/SentDetails.html",controller:"SentMessageDetailsController"}},authenticate:!0}).state("app.trashMessage",{url:"/Trash",cache:!1,views:{app:{templateUrl:"app/modules/secureMessaging/Trash/trashMessage.html",controller:"TrashMessageController"}},authenticate:!0}).state("app.trashDetail",{url:"/TrashDetail",cache:!1,params:{MessageData:null},views:{app:{templateUrl:"app/modules/secureMessaging/Trash/trashdetails.html",controller:"TrashMessageDetailsController"}},authenticate:!0}).state("app.composeMessage",{url:"/Compose",cache:!1,params:{PhysicianId:null,Body:null},views:{app:{templateUrl:"app/modules/secureMessaging/Compose/Send.html",controller:"ComposeMessageController"}},authenticate:!0}),$urlRouterProvider.otherwise("/Message")}]).controller("InboxMessageController",function($scope,$state,$timeout,MessageService,$ionicPopup,ionicToast,DataBaseService,$rootScope){function init(){var PatientId=DataBaseService.getPatientId(),type=$rootScope.SECUREMESSAGECONSTANTS.INBOXMESSAGETYPE,inboxObj={PatientId:PatientId,Type:type};MessageService.getMessages(inboxObj).then(function(result){$scope.inboxMessages=result,angular.forEach(result,function(val){val.Date=new Date(val.Date)})}).catch(function(){$scope.inboxMessages=[]}).finally(function(){$("#errormsg").show()})}$scope.showDelete=!1,init(),$scope.$on("messageEvent",function(e){init()}),$scope.deleteMessage=function(data){var msgid=data.MessageId,type="trash",postData={MessageId:msgid,Type:type},confirmPopup=$ionicPopup.confirm({title:$rootScope.SECUREMESSAGECONSTANTS.DELETETITLE,template:$rootScope.SECUREMESSAGECONSTANTS.DELETETEMPLATE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res&&MessageService.deleteMessages(postData).then(function(result){if("0"===result[0].status){var index=$scope.inboxMessages.indexOf(data);$scope.inboxMessages.splice(index,1),ionicToast.show($rootScope.SECUREMESSAGECONSTANTS.DELETEMESSAGESUCCESS,"middle",!1,2500)}}).catch(function(){})})}}).controller("InboxMessageDetailsController",function($scope,$timeout,$state,MessageService,$stateParams,$ionicPopup,ionicToast,$rootScope){var postData={MessageId:$stateParams.MessageData.MessageId};MessageService.changeMessageStatus(postData),$scope.MessageData=$stateParams.MessageData,$scope.deleteMessage=function(data){var msgid=data.MessageId,type="trash",postData={MessageId:msgid,Type:type},confirmPopup=$ionicPopup.confirm({title:$rootScope.SECUREMESSAGECONSTANTS.DELETETITLE,template:$rootScope.SECUREMESSAGECONSTANTS.DELETETEMPLATE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res&&MessageService.deleteMessages(postData).then(function(result){"0"===result[0].status&&(ionicToast.show($rootScope.SECUREMESSAGECONSTANTS.DELETEMESSAGESUCCESS,"middle",!1,2500),$state.go("app.Message"))}).catch(function(){})})}}).controller("SentMessageController",function($scope,$timeout,$state,MessageService,$ionicPopup,ionicToast,DataBaseService,$rootScope){function init(){var PatientId=DataBaseService.getPatientId(),type=$rootScope.SECUREMESSAGECONSTANTS.SENTBOXMESSAGETYPE,sentboxObj={PatientId:PatientId,Type:type};MessageService.getMessages(sentboxObj).then(function(result){$scope.sentMessages=result,angular.forEach(result,function(val){val.Date=new Date(val.Date)})}).catch(function(){$scope.sentMessages=[]}).finally(function(){$("#errormsg").show()})}$scope.showDelete=!1,init(),$scope.deleteMessage=function(data){var msgid=data.MessageId,type="trash",postData={MessageId:msgid,Type:type},confirmPopup=$ionicPopup.confirm({title:$rootScope.SECUREMESSAGECONSTANTS.DELETETITLE,template:$rootScope.SECUREMESSAGECONSTANTS.DELETETEMPLATE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res&&MessageService.deleteMessages(postData).then(function(result){if("0"===result[0].status){var index=$scope.sentMessages.indexOf(data);$scope.sentMessages.splice(index,1),ionicToast.show($rootScope.SECUREMESSAGECONSTANTS.DELETEMESSAGESUCCESS,"middle",!1,2500)}}).catch(function(){})})}}).controller("SentMessageDetailsController",function($scope,$timeout,$state,MessageService,$stateParams,$ionicPopup,ionicToast,$rootScope){$scope.MessageData=$stateParams.MessageData,$scope.deleteMessage=function(data){var msgid=data.MessageId,type="trash",postData={MessageId:msgid,Type:type},confirmPopup=$ionicPopup.confirm({title:$rootScope.SECUREMESSAGECONSTANTS.DELETETITLE,template:$rootScope.SECUREMESSAGECONSTANTS.DELETETEMPLATE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res&&MessageService.deleteMessages(postData).then(function(result){"0"===result[0].status&&(ionicToast.show($rootScope.SECUREMESSAGECONSTANTS.DELETEMESSAGESUCCESS,"middle",!1,2500),$state.go("app.sentMessage"))}).catch(function(){})})}}).controller("ComposeMessageController",function($scope,$filter,$timeout,$state,MessageService,$stateParams,ionicToast,DataBaseService,$rootScope,PhysicianService){function init(){PhysicianService.getPhysicians().then(function(result){$scope.physicianList=result,angular.forEach($scope.physicianList,function(physician){physician.id==$stateParams.PhysicianId&&($scope.Message.UserName=physician.UserName)})}).catch(function(e){$scope.physicianList=[]}).finally(function(){})}$scope.Message={},$scope.Message.description=$stateParams.Body,$scope.errorMessageClear=function(){$scope.errormessage="",$scope.descriptionError="",$scope.UserNameError=""},init(),$scope.send=function(Message){if(void 0==Message.UserName)return void($scope.UserNameError=!0);if(void 0==Message.description)return void($scope.descriptionError=!0);var patientid=DataBaseService.getPatientId(),msgobj={patientId:patientid,Assigned_to:$scope.Message.UserName,Title:"Message",Body:$scope.Message.description,patientName:patientid};MessageService.addMessage(msgobj).then(function(result){"0"===result[0].status&&(ionicToast.show($rootScope.SECUREMESSAGECONSTANTS.MESSAGETEMPLATE,"middle",!1,2500),$state.go("app.sentMessage"))}).catch(function(){})}}).controller("TrashMessageController",function($scope,$rootScope,$timeout,$state,MessageService,$stateParams,$ionicPopup,ionicToast,DataBaseService){function init(){var PatientId=DataBaseService.getPatientId(),type=$rootScope.SECUREMESSAGECONSTANTS.TRASHBOXMESSAGETYPE,trashboxObj={PatientId:PatientId,Type:type};MessageService.getMessages(trashboxObj).then(function(result){$scope.trashMessages=result,angular.forEach(result,function(val){val.Date=new Date(val.Date)})}).catch(function(){$scope.trashMessages=[]}).finally(function(){$("#errormsg").show()})}$scope.showDelete=!1,init(),$scope.deleteMessage=function(data){var msgid=data.MessageId,type="other",postData={MessageId:msgid,Type:type},confirmPopup=$ionicPopup.confirm({title:$rootScope.SECUREMESSAGECONSTANTS.DELETETITLE,template:$rootScope.SECUREMESSAGECONSTANTS.DELETETEMPLATE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res&&MessageService.deleteMessages(postData).then(function(result){if("0"===result[0].status){var index=$scope.trashMessages.indexOf(data);$scope.trashMessages.splice(index,1),ionicToast.show($rootScope.SECUREMESSAGECONSTANTS.DELETEMESSAGESUCCESS,"middle",!1,2500)}}).catch(function(){})})}}).controller("TrashMessageDetailsController",function($scope,$timeout,$state,MessageService,$stateParams,$ionicPopup,ionicToast,$rootScope){$scope.MessageData=$stateParams.MessageData,$scope.deleteMessage=function(data){var msgid=data.MessageId,type="other",postData={MessageId:msgid,Type:type},confirmPopup=$ionicPopup.confirm({title:$rootScope.SECUREMESSAGECONSTANTS.DELETETITLE,template:$rootScope.SECUREMESSAGECONSTANTS.DELETETEMPLATE,cancelText:$rootScope.APPCONSTANTS.CANCELTEXT,okText:$rootScope.APPCONSTANTS.OKTEXT});confirmPopup.then(function(res){res&&MessageService.deleteMessages(postData).then(function(result){"0"===result[0].status&&(ionicToast.show($rootScope.SECUREMESSAGECONSTANTS.DELETEMESSAGESUCCESS,"middle",!1,2500),$state.go("app.trashMessage"))}).catch(function(){})})}}),angular.module("visitsModule",[]).config(["$stateProvider","$urlRouterProvider","$compileProvider",function($stateProvider,$urlRouterProvider,$compileProvider){$compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|chrome-extension):|data:application/),$stateProvider.state("app.visits",{url:"/visits",cache:!1,params:{viewAllStatus:null},views:{app:{templateUrl:"app/modules/visits/visits.html",controller:"VisitsController"}},authenticate:!0}).state("app.details",{url:"/details",params:{visit:null},cache:!0,views:{app:{templateUrl:"app/modules/visits/visitsDetails.html",controller:"VisitsDetailsController"}},authenticate:!0}),$urlRouterProvider.otherwise("/visits")}]).filter("searchVisitFor",function(){return function(arr,searchString){if(!searchString)return arr;var result=[];return searchString=searchString.toLowerCase(),angular.forEach(arr,function(item){var fullname=item.firstname.trim()+" "+item.lastname.trim(),fullname_rev=item.lastname.trim()+" "+item.firstname.trim(),speciality="";item.specialty&&(speciality=item.specialty.trim());var mainAddressLine1="",mainCity="",reason="",visitno="";item.mainAddressLine1&&(mainAddressLine1=item.mainAddressLine1),item.mainCity&&(mainCity=item.mainCity),item.reason&&(reason=item.reason),item.encounter&&(visitno=item.encounter),item.firstname.toLowerCase().trim().indexOf(searchString)===-1&&item.lastname.trim().toLowerCase().indexOf(searchString)===-1&&fullname.trim().toLowerCase().indexOf(searchString)===-1&&fullname_rev.toLowerCase().indexOf(searchString)===-1&&speciality.toLowerCase().indexOf(searchString)===-1&&mainAddressLine1.toLowerCase().indexOf(searchString)===-1&&mainCity.toLowerCase().indexOf(searchString)===-1&&reason.toLowerCase().indexOf(searchString)===-1&&visitno.toLowerCase().indexOf(searchString)===-1||result.push(item)}),result}}).controller("VisitsController",function($scope,$rootScope,$filter,$state,DataBaseService,MedicalService,CommanService,ionicToast,PatientVisitService){function init(){PatientVisitService.getPatientVisits().then(function(result){$scope.myVisits=result}).catch(function(){$scope.myVisits=[]}).finally(function(){$("#errorMsg").show()})}init(),$scope.$on("visitEvent",function(e){init()}),$scope.shareFile=function(visit){PatientVisitService.getPatientVisitDetails(visit.encounter).then(function(result){if(angular.forEach(result,function(visitObj){visitObj.PatientVisit&&($scope.Pdfhtml=visitObj.PatientVisit.pdf)}),""==$scope.Pdfhtml)ionicToast.show($rootScope.VISITSCONSTANTS.VISITMESSAGE,"middle",!1,2500);else{var fileObj={dataType:"DATAURL",fileURL:$scope.Pdfhtml,fileName:"Visit",fileType:"pdf",visitId:visit.encounter,docName:"Visit"};CommanService.fileshare(fileObj,$scope)}}).catch(function(){}).finally(function(){$("#errorMsg").show()})},$scope.downloadAndOpenFile=function(visit){PatientVisitService.getPatientVisitDetails(visit.encounter).then(function(result){if(angular.forEach(result,function(visitObj){visitObj.PatientVisit&&($scope.Pdfhtml=visitObj.PatientVisit.pdf)}),""==$scope.Pdfhtml)ionicToast.show($rootScope.VISITSCONSTANTS.VISITMESSAGE,"middle",!1,2500);else{var PdfData={dataType:"DATAURL",fileType:"pdf",fileURL:$scope.Pdfhtml,fileName:"Visit"};CommanService.fileDownload(PdfData)}}).catch(function(){}).finally(function(){$("#errorMsg").show()})}}).controller("VisitsDetailsController",function($scope,$rootScope,$filter,$state,MedicalService,$stateParams,ionicToast,DataBaseService,CommanService,PatientVisitService,sharedService){function init(){$scope.decodedString,$scope.patientVisit=[],sharedService.checkConnection()?PatientVisitService.getPatientVisitDetails($scope.visitData.encounter).then(function(result){angular.forEach(result,function(visitDetail){void 0!=visitDetail.PatientVisit_ROS&&""!=visitDetail.PatientVisit_ROS.type&&$scope.patientVisit.push(visitDetail.PatientVisit_ROS),void 0!=visitDetail.PatientVisit_SOAP&&""!=visitDetail.PatientVisit_SOAP.type&&$scope.patientVisit.push(visitDetail.PatientVisit_SOAP),void 0!=visitDetail.PatientVisit_ROSchecks&&""!=visitDetail.PatientVisit_ROSchecks.type&&$scope.patientVisit.push(visitDetail.PatientVisit_ROSchecks),void 0!=visitDetail.PatientVisit_Vitals&&""!=visitDetail.PatientVisit_Vitals.type&&$scope.patientVisit.push(visitDetail.PatientVisit_Vitals),void 0!=visitDetail.PatientVisit_Issues&&($scope.Visitissues=visitDetail.PatientVisit_Issues.Issues)})}).catch(function(){$scope.myVisitDetails=[]}).finally(function(){$("#errorMsg").show()}):($scope.isNetworkAvailable=!1,$scope.Visitissues=$scope.visitData.Issues)}$scope.visitData=$stateParams.visit,$scope.isNetworkAvailable=!0;new Date;$scope.ShowCategory=function(index){$scope.categoryIndex==index?$scope.categoryIndex=-1:$scope.categoryIndex=index},init(),$scope.downloadAndOpenFile=function(){PatientVisitService.getPatientVisitDetails($scope.visitData.encounter).then(function(result){if(angular.forEach(result,function(visitObj){visitObj.PatientVisit&&($scope.Pdfhtml=visitObj.PatientVisit.pdf)}),""==$scope.Pdfhtml)ionicToast.show($rootScope.VISITSCONSTANTS.VISITMESSAGE,"middle",!1,2500);else{var PdfData={dataType:"DATAURL",fileType:"pdf",fileURL:$scope.Pdfhtml,fileName:"Visit"};CommanService.fileDownload(PdfData)}}).catch(function(){}).finally(function(){$("#errorMsg").show()})},$scope.shareFile=function(){if(""==$scope.Pdfhtml)ionicToast.show($rootScope.VISITSCONSTANTS.VISITMESSAGE,"middle",!1,2500);else{var fileObj={dataType:"DATAURL",fileURL:$scope.Pdfhtml,fileName:"Visit",fileType:"pdf",visitId:$scope.visitData.encounter,docName:"Visit"};CommanService.fileshare(fileObj,$scope)}},$scope.IsSuccess=!1,$scope.goToMessages=function(){$state.go("app.composeMessage",{UserName:$scope.visitData.lastname+" "+$scope.visitData.firstname})},$scope.gotoRequestBooking=function(){$state.go("app.request",{physician:$scope.visitData})}}),angular.module("DataService",[]).service("LoginService",function($http,$state,$ionicLoading,TemplateFactory,GetUrlFactory,configFactory,sharedService,$rootScope,ionicToast,$q){this.patientLogin=function(loginObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="LOGINOBJECT",rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,loginObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw console.log("Error: ",e),$state.go("app.error",{Error:e}),e}).finally(function(){$ionicLoading.hide()})},this.forgetpassword=function(username){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="FORGETPASSWORD";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,username,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw console.log("Error: ",e),$state.go("app.error",{Error:e}),e}).finally(function(){$ionicLoading.hide()})},this.changePassword=function(password){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="CHANGEPASSWORD",rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $ionicLoading.show($rootScope.APPCONSTANTS.LOADER),$http.post(url,password,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw console.log("Error: ",e),$state.go("app.error",{Error:e}),e}).finally(function(){$ionicLoading.hide()})}}).service("CommanService",function($http,$q,$state,$filter,$timeout,$ionicLoading,TemplateFactory,GetUrlFactory,configFactory,sharedService,$cordovaFileTransfer,DataBaseService,ionicToast,BillingService,$ionicPopup,$rootScope,MedicalService,$rootScope,$q){this.fileDownload=function(fileObj){if("browser"==device.platform){var FileExtension=sharedService.getFileExtension(fileObj.fileType);if("URL"==fileObj.dataType){var link=document.createElement("a");link.download=fileObj.fileName+FileExtension,link.href=fileObj.fileURL,link.click()}else if("DATAURL"==fileObj.dataType){var link=document.createElement("a");link.download=fileObj.fileName+FileExtension,link.href=$rootScope.APPCONSTANTS.PDFBASE64URL+fileObj.fileURL,link.click()}}else $ionicLoading.show($rootScope.APPCONSTANTS.LOADER),document.addEventListener("deviceready",function(){var currentDate=$filter("date")(new Date,"dd_MM_yyyy_h_mma"),userName=DataBaseService.getUser(),targetPath="",url="",FileExtension=sharedService.getFileExtension(fileObj.fileType);targetPath=cordova.file.externalApplicationStorageDirectory+fileObj.fileName+"_"+userName+"_"+currentDate+FileExtension,"URL"==fileObj.dataType?url=fileObj.fileURL:"DATAURL"==fileObj.dataType?url=$rootScope.APPCONSTANTS.PDFBASE64URL+fileObj.fileURL:"BYTEDATA"==fileObj.dataType&&(url=$rootScope.APPCONSTANTS.ZIPBASE64URL+fileObj.fileURL);var trustHosts=!0,options={};$cordovaFileTransfer.download(url,targetPath,options,trustHosts).then(function(result){$ionicLoading.hide(),sharedService.showNotification($rootScope.APPCONSTANTS.SUCCESSDOWNLOAD)},function(err){$ionicLoading.hide()},function(progress){})},!1)},this.fileshare=function(fileObj,$scope){if("browser"==device.platform){$scope.data={};var myPopup=$ionicPopup.show({template:'To <input type = "text" ng-model = "data.model"><div ng-show="IsSuccess" class="form-error" align="center"><span>Please enter required field.</span></div>',title:$rootScope.APPCONSTANTS.SHARETITLE,scope:$scope,buttons:[{text:"Cancel"},{text:"<b>Send</b>",type:"button-positive",onTap:function(e){return $scope.data.model?$scope.data.model:($scope.IsSuccess=!0,void e.preventDefault())}}]});myPopup.then(function(res){"undefined"!=typeof res&&(fileObj.mailto=res,fileObj.from=DataBaseService.getPatientFullName(),fileObj.id=DataBaseService.getPatientId(),fileObj.type="Document",MedicalService.shareMail(fileObj).then(function(result){"0"===result[0].status&&(isSuccess=!0,ionicToast.show($rootScope.APPCONSTANTS.MAILSENTSUCCESS,"middle",!1,2500)),"-1"===result[0].status&&(isSuccess=!0,ionicToast.show(result[0].reason,"middle",!1,2500))}).catch(function(e){console.log(e)}))})}else $ionicLoading.show($rootScope.APPCONSTANTS.LOADER),document.addEventListener("deviceready",function(){var currentDate=$filter("date")(new Date,"dd_MM_yyyy_h_mma"),userName=DataBaseService.getUser(),targetPath="",url="",FileExtension="";
fileObj.fileType.toLocaleLowerCase().indexOf($rootScope.APPCONSTANTS.PDF)>-1?FileExtension=$rootScope.APPCONSTANTS.PDFEXTENSION:fileObj.fileType.toLocaleLowerCase().indexOf($rootScope.APPCONSTANTS.PNG)>-1?FileExtension=$rootScope.APPCONSTANTS.PNGEXTENSION:fileObj.fileType.toLocaleLowerCase().indexOf($rootScope.APPCONSTANTS.JPG)>-1?FileExtension=$rootScope.APPCONSTANTS.JPGEXTENSION:fileObj.fileType.toLocaleLowerCase().indexOf($rootScope.APPCONSTANTS.ZIP)>-1&&(FileExtension=$rootScope.APPCONSTANTS.ZIPEXTENSION);var fileName=fileObj.fileName+"_"+userName+"_"+currentDate+FileExtension;targetPath=cordova.file.externalApplicationStorageDirectory;var targetPathfile=targetPath+fileName;"URL"==fileObj.dataType?url=fileObj.fileURL:"DATAURL"==fileObj.dataType&&(url=$rootScope.APPCONSTANTS.PDFBASE64URL+fileObj.fileURL);var trustHosts=!0,options={};$cordovaFileTransfer.download(url,targetPathfile,options,trustHosts).then(function(result){var options={message:"Hello, I am sharing my medical record with you.",subject:$rootScope.APPCONSTANTS.SHARESUBJECT,files:[targetPathfile],url:"",chooserTitle:"Share via"},onSuccess=function(result){window.resolveLocalFileSystemURL(targetPath,function(dir){dir.getFile(fileName,{create:!1})})},onError=function(msg){};window.plugins.socialsharing.shareWithOptions(options,onSuccess,onError),$ionicLoading.hide()},function(err){$ionicLoading.hide()},function(progress){})},!1)},this.getfacility=function(){if(!sharedService.checkConnection)return DataBaseService.getAllFacility();var apiMethod="FACILITY",rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.get(url,{transformResponse:function(data,headers){var Facility=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setAllFacility(Facility),Facility}}).catch(function(e){throw console.log("Error: ",e),$state.go("app.error",{Error:e}),e}).finally(function(){})},this.portalBussinessService=function(){var apiMethod="PATIENTPORTALBUSINESSSERVICE",rqstprm={},bussinessObj={pid:DataBaseService.getPatientId(),facilityId:DataBaseService.getFacilityId()},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,bussinessObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.getCountry=function(){if(!sharedService.checkConnection())return DataBaseService.getAllCountries();var apiMethod="GETCOUNTRIES";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.get(url,{transformResponse:function(data,headers){var Countries=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setAllCountries(Countries),Countries}}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.getState=function(countryId){if(!sharedService.checkConnection())return DataBaseService.getAllStates();var apiMethod="GETSTATES",rqstprm={};rqstprm.countryId=countryId;var url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $ionicLoading.show($rootScope.APPCONSTANTS.LOADER),$http.get(url,{transformResponse:function(data,headers){var allstate=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setAllState(allstate),allstate}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})}}).service("DocumentsService",function($http,$ionicLoading,TemplateFactory,GetUrlFactory,configFactory,sharedService,$state,DataBaseService,$rootScope,ionicToast,$q){this.addPatientDocument=function(docObj,file){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="ADDPATIENTDOCUMENT";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,docObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),e}).finally(function(){$ionicLoading.hide()})},this.getPatientDocument=function(){if(!sharedService.checkConnection())return DataBaseService.getDocuments();var apiMethod="GETPATIENTDOCUMENT",patientID=DataBaseService.getPatientId(),data={patientId:patientID,categoryId:null},rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $ionicLoading.show($rootScope.APPCONSTANTS.LOADER),$http.post(url,data,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){var patientDocuments=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setDocuments(patientDocuments),patientDocuments}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),e}).finally(function(){$ionicLoading.hide()})},this.deletePatientDocument=function(documentId){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="DELETEPATIENTDOCUMENT",rqstprm={};$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,documentId,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),e}).finally(function(){$ionicLoading.hide()})}}).service("PushNotificationService",function($http,$ionicLoading,TemplateFactory,GetUrlFactory,configFactory,sharedService,$rootScope,ionicToast,$q){this.addDeviceToken=function(tokenObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="ADDDEVICETOKEN";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,tokenObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})}}).service("PatientVisitService",function($http,$ionicLoading,TemplateFactory,GetUrlFactory,configFactory,sharedService,$rootScope,DataBaseService,ionicToast,$q){this.getPatientVisits=function(){if(!sharedService.checkConnection())return DataBaseService.getVisits();var apiMethod="GETPATIENTVISITS";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},appointmentObj={};appointmentObj.patientId=DataBaseService.getPatientId();var url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,appointmentObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){var visits=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setVisits(visits),visits}}).then(function(response){return response.data}).catch(function(e){throw console.log("Error: ",e),$state.go("app.error",{Error:e}),e}).finally(function(){$ionicLoading.hide()})},this.getPatientVisitDetails=function(visitId){var apiMethod="GETVISITSUMMERY";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},appointmentObj={visitId:visitId},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,appointmentObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){var PatientDetails=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setAllVisits(PatientDetails),PatientDetails}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})}}).service("PatientProfileService",function($http,$ionicLoading,TemplateFactory,GetUrlFactory,configFactory,sharedService,$rootScope,DataBaseService,$state,ionicToast,$q){this.getPatientProfile=function(){if(!sharedService.checkConnection())return DataBaseService.getPatientProfile();var apiMethod="GETPATIENTPROFILE",patientId=DataBaseService.getPatientId();$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var patientProfile={patientId:patientId},rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,patientProfile,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){var PatientProfile=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setPatientProfile(PatientProfile[0]),PatientProfile[0]}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.updatePatientProfile=function(profileObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="UPDATEPATIENTPROFILEDATA",rqstprm={};profileObj.PatientID=DataBaseService.getPatientId();var url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $ionicLoading.show($rootScope.APPCONSTANTS.LOADER),$http.post(url,profileObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.updatePatientProfileImage=function(imageObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="UPDATEPATIENTPROFILEIMAGE";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,imageObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.getPrescriptions=function(patientId){if(!sharedService.checkConnection())return DataBaseService.getPatientPrescription();var apiMethod="GETPRESCRIPTION";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var myPrescription={patientId:patientId},rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,myPrescription,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){var Prescription=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setAllPrescription(Prescription),Prescription}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})}}).service("PhysicianService",function($http,$state,$ionicLoading,TemplateFactory,GetUrlFactory,configFactory,sharedService,DataBaseService,$rootScope,ionicToast,$q){this.getPhysicians=function(searchString){if(!sharedService.checkConnection())return DataBaseService.getPhysicians();var apiMethod="GETPHYSCIAN",facilityId=DataBaseService.getFacilityId(),rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return url=url+"?facility_id="+facilityId,searchString&&(url=url+"&search="+searchString),$ionicLoading.show($rootScope.APPCONSTANTS.LOADER),$http.get(url,{transformResponse:function(data,headers){var physicansData=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setPhysicians(physicansData),physicansData}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.getPhysician=function(doctorId){var foundedPhysician=DataBaseService.getPhysician(doctorId);if(foundedPhysician)return foundedPhysician;if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="GETPHYSCIAN",rqstprm={};rqstprm.id=doctorId;var url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $ionicLoading.show($rootScope.APPCONSTANTS.LOADER),$http.get(url,{transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})}}).service("BillingService",function($http,$ionicLoading,TemplateFactory,GetUrlFactory,APIS,configFactory,sharedService,DataBaseService,$rootScope,ionicToast,$q){this.getFeesheet=function(bill){if(!sharedService.checkConnection())return DataBaseService.getAllFeesheet();var apiMethod="GETFEESHEET";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,bill,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){var feeSheet=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setAllFeesheet(feeSheet[0]),feeSheet[0]}}).then(function(response){return response.data}).catch(function(e){throw console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})}}).service("ReportService",function($http,$ionicLoading,TemplateFactory,GetUrlFactory,APIS,configFactory,sharedService,$window,$rootScope,CommanService,ionicToast,$q){this.generateBillPDF=function(statement){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="PATIENTBILLREPORT";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,statement,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.generateReport=function(report){var apiMethod="PATIENTCCRCCDREPORT";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,report,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.generateMedicalReport=function(patientMedicalRecord){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="GENERATEPATIENTMEDICALRECORD";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,patientMedicalRecord,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})}}).service("AppointmentService",function($http,$state,$ionicLoading,TemplateFactory,GetUrlFactory,configFactory,sharedService,DataBaseService,$rootScope,ionicToast,$q){this.getAppointmentHistory=function(){if(!sharedService.checkConnection())return DataBaseService.getAppointments();var apiMethod="GETPATIENTAPPOINTMENT",rqstprm={};rqstprm.id=DataBaseService.getPatientId();var facilityId=DataBaseService.getFacilityId(),url=GetUrlFactory.getUrl(apiMethod,rqstprm);return url=url+"&facility_id="+facilityId,$ionicLoading.show($rootScope.APPCONSTANTS.LOADER),$http.get(url,{transformResponse:function(data,headers){var appointments=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setAppointments(appointments),appointments}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.getAppointmentShedule=function(providerid,days,sheduleDate){var apiMethod="GETDOCTORSHEDULE";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={};rqstprm.providerid=providerid,rqstprm.days=days,rqstprm.date=sheduleDate;var url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.get(url,{transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.GetRequestedAppointmentNew=function(appointmentObj){if(!sharedService.checkConnection())return DataBaseService.getRequestedAppointments();var apiMethod="GETREQUESTEDAPPOINTMENTNEW";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,appointmentObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){var requestedAppointments=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setAllRequestedAppointments(requestedAppointments),requestedAppointments}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.addAppointment=function(appointmentObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="ADDAPPOINTMENT";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,appointmentObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.updateAppointment=function(appointmentObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="UPDATEAPPOINTMENT";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,appointmentObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.cancelAppointment=function(appointmentObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var rqstprm={},tempMethod="DELETEAPPOINTMENT",postData={pc_eid:appointmentObj.pc_eid};$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var url=GetUrlFactory.getUrl(tempMethod,rqstprm);return $http.post(url,postData,{headers:{"Content-Type":TemplateFactory.getTemplate(tempMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,tempMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,tempMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.requestAppointment1=function(requestObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="REQUESTAPPOINTMENTNEW";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,requestObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.cancelRequestedAppointmentNew=function(appointmentId){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="DELETEREQUESTEDAPPOINTMENTNEW";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm),cancelAppointment=$.param({auditMasterid:appointmentId}),config={headers:{"Content-Type":$rootScope.APPCONSTANTS.URLENCODEDCONTENTTYPE}};return $http.post(url,cancelAppointment,config).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})}}).service("MedicalService",function($http,$state,$ionicLoading,TemplateFactory,GetUrlFactory,APIS,configFactory,sharedService,DataBaseService,$rootScope,ionicToast,$q){this.shareMail=function(patientData){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="MAILTOPATIENT";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,patientData,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.getMedicalHistory=function(){if(!sharedService.checkConnection())return DataBaseService.getMedicalDetail();var apiMethod="GETMEDICALHISTORY";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={};rqstprm.patientid=DataBaseService.getPatientId();var url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.get(url,{transformResponse:function(data,headers){var medicalData=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setMedicalDetail(medicalData[0]),medicalData[0]}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.addPatientVitals=function(vitalsObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="ADDVITAL";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER),vitalsObj.formType="vitals",vitalsObj.patientId=DataBaseService.getPatientId();var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,vitalsObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.addPatientRecords=function(recordObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);recordObj.patientId=DataBaseService.getPatientId();var apiMethod="ADDMEDICALRECORDS";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,recordObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.updatelifeStyleHistory=function(lifeStyleObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="ADDLIFESTYLEHISTORY";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER),lifeStyleObj.formType="lifestylehistory",lifeStyleObj.patientId=DataBaseService.getPatientId();var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,lifeStyleObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.addSelfMedicalHistory=function(DiseasesName,notes){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="ADDSELFMEDICALHISTORY",patientID=DataBaseService.getPatientId();$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var FormType="formType",PatientID="Id",Notes="Notes";DiseasesName[FormType]="history",DiseasesName[PatientID]=patientID,DiseasesName[Notes]=notes,console.log(DiseasesName);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,DiseasesName,{
headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.addUpdateFamilyHistory=function(familyHistory){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="ADDFAMILYHISTORY";familyHistory.patientId=DataBaseService.getPatientId(),familyHistory.formType="familyhistory";var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $ionicLoading.show($rootScope.APPCONSTANTS.LOADER),$http.post(url,familyHistory,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("My ErrorError: ",e),e}).finally(function(){$ionicLoading.hide()})}}).service("InsuranceService",function($http,$state,$ionicLoading,TemplateFactory,GetUrlFactory,APIS,configFactory,sharedService,DataBaseService,$rootScope,ionicToast,$q){this.getInsurances=function(){if(!sharedService.checkConnection())return DataBaseService.getInsurances();var apiMethod="GETINSURANCE",rqstprm={},patientPrm={};patientPrm.patientId=DataBaseService.getPatientId();var url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $ionicLoading.show($rootScope.APPCONSTANTS.LOADER),$http.post(url,patientPrm,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){var InsuranceData=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setAllInsurances(InsuranceData),InsuranceData}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.updateInsuranceData=function(insuranceObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="ADDINSURANCE",patientID=DataBaseService.getPatientId();$ionicLoading.show($rootScope.APPCONSTANTS.LOADER),insuranceObj.patientId=patientID;var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,insuranceObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.getInsuranceCompanies=function(){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="GETINSURANCECOMPANIES",tokenobj={},rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $ionicLoading.show($rootScope.APPCONSTANTS.LOADER),$http.post(url,tokenobj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})}}).service("MessageService",function($http,$state,$ionicLoading,TemplateFactory,GetUrlFactory,APIS,configFactory,sharedService,DataBaseService,$rootScope,ionicToast,$q){this.getMessages=function(msgObj){if(!sharedService.checkConnection())return DataBaseService.getMessages(msgObj.Type);var apiMethod="GETSENTMESSAGES";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={};rqstprm.PatientId=msgObj.PatientId,rqstprm.Type=msgObj.Type;var url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.get(url,{transformResponse:function(data,headers){var MessageData=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setMessages(MessageData),MessageData}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.addMessage=function(messageObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="ADDMESSAGE";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,messageObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.changeMessageStatus=function(message){var apiMethod="CHANGEMESSAGESTATUS";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,message,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})},this.deleteMessages=function(msgDelete){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="DELETEMESSAGES";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var rqstprm={};rqstprm.MessageId=msgDelete.MessageId,rqstprm.Type=msgDelete.Type;var url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.get(url,{transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})}}).service("NotificationService",function($http,$state,$ionicLoading,TemplateFactory,GetUrlFactory,APIS,configFactory,sharedService,DataBaseService,$rootScope,ionicToast,$q){this.getNotification=function(value){if(!sharedService.checkConnection())return DataBaseService.getNotification();$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var postData={};postData.pid=value.pid,postData.isData=value.isData;var apiMethod="GETNOTIFICATIONS",rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,postData,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){var Notifications=configFactory.getTranformResponse(data,headers,apiMethod);return DataBaseService.setNotification(Notifications),Notifications}}).then(function(response){return response.data}).catch(function(e){throw console.log("Error: ",e),$state.go("app.error",{Error:e}),e}).finally(function(){$ionicLoading.hide()})},this.deleteNotification=function(DeleteObj){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var apiMethod="DELETENOTIFICATION",rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,DeleteObj,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),e}).finally(function(){$ionicLoading.hide()})},this.getNotificationCount=function(value){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var postData={};postData.pid=value.pid,postData.isData=value.isData;var apiMethod="GETNOTIFICATIONSCOUNT",rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,postData,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){return console.log("Error: ",e),null}).finally(function(){$ionicLoading.hide()})},this.readNotification=function(reminderId){if(!sharedService.checkConnection())return"browser"!=device.platform?sharedService.showNotification($rootScope.APPCONSTANTS.NETWORKTEMPLATE):ionicToast.show($rootScope.APPCONSTANTS.NETWORKTEMPLATE,"middle",!1,2500),$q.when(null);var apiMethod="READNOTIFICATION";$ionicLoading.show($rootScope.APPCONSTANTS.LOADER);var reminder={reminderId:reminderId},rqstprm={},url=GetUrlFactory.getUrl(apiMethod,rqstprm);return $http.post(url,reminder,{headers:{"Content-Type":TemplateFactory.getTemplate(apiMethod,$rootScope.APPCONSTANTS.REQUEST).content_type},transformRequest:function(data,headersGetter){return configFactory.getTranformRequest(data,apiMethod)},transformResponse:function(data,headers){return configFactory.getTranformResponse(data,headers,apiMethod)}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),console.log("Error: ",e),e}).finally(function(){$ionicLoading.hide()})}}),angular.module("PatientPortalApp").factory("AuthFactory",function($window,DataBaseService){var auth={checkUserIsLogin:function(){var patientId=DataBaseService.getPatientId();return patientId?isLogged=!0:isLogged=!1,isLogged}};return auth}),angular.module("PatientPortalApp").factory("OrgService",function($http,$state,$ionicLoading,sharedService){return{getOragnizationData:function(){var url="https://cd91aabvw0.execute-api.us-west-2.amazonaws.com/LATEST/patientportalapigatewaydata",RequestData={data:{operation:"DEV",payload:{}}};return $http.post(url,RequestData,{headers:{"Content-Type":"application/json"}}).then(function(response){return response.data}).catch(function(e){throw $state.go("app.error",{Error:e}),e}).finally(function(){$ionicLoading.hide()})}}}),angular.module("PatientPortalApp").factory("userAuthFactory",function(AuthFactory,$window,$http,$state){return{login:function(userName,facility_id,password){return{username:userName,facility_id:facility_id,password:password}},logout:function(){AuthFactory.isLogged&&(AuthFactory.isLogged=!1,window.localStorage.removeItem("patientId"),$state.go("login"))}}}),angular.module("PatientPortalApp").factory("DataFactory",function($window){var AppointmentHistoryData=null,dataFactory={AppointmentHistoryData:AppointmentHistoryData,setAppointmentHistoryData:function(paramAppointmentHistoryData){AppointmentHistoryData=paramAppointmentHistoryData}};return dataFactory}),angular.module("PatientPortalApp").factory("ChatDetails",["sharedConn","$rootScope","$timeout",function(sharedConn,$rootScope,$timeout){return ChatDetailsObj={},ChatDetailsObj.setTo=function(to_id){ChatDetailsObj.to=to_id},ChatDetailsObj.getTo=function(){return $timeout(function(){angular.forEach($rootScope.chats,function(value,index){ChatDetailsObj.to.indexOf(value.id)!==-1&&(value.unreadMessageCount=0)})}),ChatDetailsObj.to},ChatDetailsObj}]),angular.module("PatientPortalApp").factory("Chats",["sharedConn","$rootScope","$state","$http",function(sharedConn,$rootScope,$state,$http){return ChatsObj={},connection=sharedConn.getConnectObj(),ChatsObj.roster=[],loadRoster=function(){function callbackRosterUser(iq){$(iq).find("item").each(function(){$(this).attr("jid")}),$rootScope.$apply(function(){$(iq).find("item").each(function(){ChatsObj.roster.push({id:$(this).attr("jid"),name:$(this).attr("name")||$(this).attr("jid"),lastText:"Offline",face:"img/Userm.jpg",unreadMessageCount:0,status:"led-offline",group:$.map($("group",this),function(group,idx){return $(group).text()})})}),console.log(ChatsObj.roster)}),$(iq).find("item").each(function(){ChatsObj.getPresence($(this).attr("jid"))})}var iq=$iq({type:"get"}).c("query",{xmlns:"jabber:iq:roster"});return 0==ChatsObj.roster.length&&connection.sendIQ(iq,callbackRosterUser),connection.addHandler(function(presence){var presence_type=$(presence).attr("type"),fromUser=$(presence).attr("from");if("error"!=presence_type)if("unavailable"===presence_type)console.log("offline"),console.log($(presence).attr("from")),$rootScope.$apply(function(){angular.forEach(ChatsObj.roster,function(value,index){fromUser.indexOf(value.id)!==-1&&(value.lastText="Offline",value.status="led-offline")})});else{var show=$(presence).find("show").text();"chat"===show||""===show?(console.log("online"),$rootScope.$apply(function(){angular.forEach(ChatsObj.roster,function(value,index){console.log(fromUser),fromUser.indexOf(value.id)!==-1&&(value.lastText="Online",value.status="led-online")})})):console.log("etc")}return!0},null,"presence"),connection.send($pres()),connection.addHandler(function(iq){console.log(iq),iq&&0!=iq.length&&$rootScope.$apply(function(){$(iq).find("item").each(function(){"from"==$(this).attr("subscription")?ChatsObj.roster.push({id:$(this).attr("jid"),name:$(this).attr("name")||$(this).attr("jid"),lastText:"Available to Chat",face:"img/Userm.jpg"}):"none"==$(this).attr("subscription")&&"subscribe"==$(this).attr("ask")?ChatsObj.roster.push({id:$(this).attr("jid"),name:$(this).attr("name")||$(this).attr("jid"),lastText:"Waiting to Accept",face:"img/Userm.jpg"}):"none"==$(this).attr("subscription")&&(console.log($(this).attr("jid")),ChatsObj.removeRoster(ChatsObj.getRoster($(this).attr("jid"))))}),$state.go("tabsController.chats",{},{location:"replace",reload:!0})})},"jabber:iq:roster","iq","set"),ChatsObj.roster},ChatsObj.getPresence=function(jid){console.log("getPresence jid: "+jid);var check=$pres({type:"probe",to:jid});connection.send(check)},ChatsObj.allRoster=function(){return loadRoster(),console.log("Rosater:-"+ChatsObj.roster),ChatsObj.roster},ChatsObj.removeRoster=function(chat){ChatsObj.roster.splice(ChatsObj.roster.indexOf(chat),1)},ChatsObj.getRoster=function(chatId){for(var i=0;i<ChatsObj.roster.length;i++)if(ChatsObj.roster[i].id==chatId)return console,log("Rosters:-"+ChatsObj.roster[i]),ChatsObj.roster[i]},ChatsObj.addNewRosterContact=function(to_id){console.log(to_id),connection.send($pres({to:to_id,type:"subscribe"}))},ChatsObj.joinGroupChatRoom=function(roomJid,userId){connection.send($pres().c("priority").t("-1")),connection.muc.join(roomJid,userId.split("@")[0],null,null,null,userId.split("@")[0].toLowerCase()),console.log("User joined "+userId)},$rootScope.resetScope=function(){$rootScope.ChatsObj=""},ChatsObj}]),angular.module("PatientPortalApp").factory("sharedConn",["$ionicPopup","$state","$rootScope","$ionicPopup","$http",function($ionicPopup,$state,$rootScope,$ionicPopup,$http){function is_element_map(jid){return jid in accepted_map}function push_map(jid){accepted_map[jid]=!0}$rootScope.usersjiddata=[];var SharedConnObj={};$rootScope.messages=[],SharedConnObj.BOSH_SERVICE=$rootScope.CHATCONSTANTS.BOSH_SERVICE,SharedConnObj.connection=null,SharedConnObj.loggedIn=!1,SharedConnObj.getConnectObj=function(){return SharedConnObj.connection},SharedConnObj.isLoggedIn=function(){return SharedConnObj.loggedIn},SharedConnObj.getBareJid=function(){var str=SharedConnObj.connection.jid;return str=str.substring(0,str.indexOf("/"))},SharedConnObj.login=function(jid,host,pass){SharedConnObj.connection=new Strophe.Connection(SharedConnObj.BOSH_SERVICE,{keepalive:!0}),SharedConnObj.connection.connect(jid+"@"+host,pass,SharedConnObj.onConnect)},SharedConnObj.onConnect=function(status){status==Strophe.Status.CONNECTING?console.log("Strophe is connecting."):status==Strophe.Status.CONNFAIL?console.log("Strophe failed to connect."):status==Strophe.Status.DISCONNECTING?console.log("Strophe is disconnecting."):status==Strophe.Status.DISCONNECTED?console.log("Strophe is disconnected."):status==Strophe.Status.CONNECTED&&(SharedConnObj.connection.addHandler(SharedConnObj.onMessage,null,"message",null,null,null),SharedConnObj.connection.send($pres().tree()),SharedConnObj.loggedIn=!0,SharedConnObj.connection.addHandler(SharedConnObj.on_subscription_request,null,"presence","subscribe"),SharedConnObj.connection.si_filetransfer.addFileHandler(fileHandler),SharedConnObj.connection.ibb.addIBBHandler(ibbHandler),SharedConnObj.connection.addHandler(SharedConnObj.on_message,null,"message"),SharedConnObj.connection.addHandler(SharedConnObj.onInvite,"jabber:x:conference"))},SharedConnObj.onInvite=function(stanza){console.log("Stanza:-"+stanza)},SharedConnObj.onMessage=function(msg){return $rootScope.$broadcast("msgRecievedBroadcast",msg),!0},SharedConnObj.register=function(jid,pass,name){},SharedConnObj.logout=function(){console.log("reached");try{SharedConnObj.connection.options.sync=!0,SharedConnObj.connection.flush(),SharedConnObj.connection.disconnect()}catch(e){}};var accepted_map={};return SharedConnObj.on_subscription_request=function(stanza){if(console.log(stanza),"subscribe"==stanza.getAttribute("type")&&!is_element_map(stanza.getAttribute("from"))){var confirmPopup=$ionicPopup.confirm({title:"Confirm Friend Request!",template:" "+stanza.getAttribute("from")+" wants to be your freind"});return confirmPopup.then(function(res){res?(SharedConnObj.connection.send($pres({to:stanza.getAttribute("from"),type:"subscribed"})),push_map(stanza.getAttribute("from"))):SharedConnObj.connection.send($pres({to:stanza.getAttribute("from"),type:"unsubscribed"}))}),!0}},SharedConnObj.getHistoricalMessage=function(from_Id){var tojidt=SharedConnObj.connection.jid;return console.log("TOJID:_"+tojidt),$http({url:$rootScope.CHATCONSTANTS.historyAPIUrl,method:"POST",data:{fromJID:from_Id,toJID:tojidt.split("/")[0]},headers:{"Content-Type":$rootScope.APPCONSTANTS.JSONCONTENTTYPE}}).then(function(results){return results.data})},SharedConnObj}]),angular.module("PatientPortalApp").factory("sharedMessages",["$ionicPopup","$state","$rootScope","$ionicPopup","$ionicScrollDelegate","messageEncryption","ionicToast","sharedConn",function($ionicPopup,$state,$rootScope,$ionicPopup,$ionicScrollDelegate,messageEncryption,ionicToast,sharedConn){var SharedMessages={};return SharedMessages.messageRecieve=function(msg){var to=msg.getAttribute("to"),from=msg.getAttribute("from"),type=msg.getAttribute("type"),elems=msg.getElementsByTagName("body"),d=new Date;if(d=d.toLocaleTimeString().replace(/:\d+ /," "),"chat"==type&&elems.length>0){var body=elems[0],textMsg=messageEncryption.decryption(Strophe.getText(body)),fromUser=from.split("/")[0];$rootScope.messages.push({userId:from,text:textMsg,time:d,from:fromUser,to:to,sendRecive:1});var myjid=sharedConn.getConnectObj().jid,myid=myjid.split("/")[0],msglen=$rootScope.messages.length-1;if($rootScope.messages.length>0){var fromname="";$rootScope.sender=$rootScope.messages[msglen].from;for(var j=0;j<ChatsObj.roster.length;j++)if(ChatsObj.roster[j].id===$rootScope.messages[msglen].from&&$rootScope.messages[msglen].from!=myid){fromname=ChatsObj.roster[j].name;break}$rootScope.message='<a href="#/app/chatsdetail/'+fromname+"/"+$rootScope.sender+'"> You have received chat from '+fromname+"</a>",$rootScope.IsUserSameChat==$rootScope.sender&&""!=$rootScope.IsUserSameChat||ionicToast.show($rootScope.message,"top",!1,9e3),$rootScope.IsUserSameChat==$rootScope.sender&&$rootScope.message.length>0&&$ionicScrollDelegate.scrollBottom(!0)}console.log($rootScope.messages);console.log($rootScope.chats),console.log($rootScope.IsUnreadMessage);var result=$rootScope.chats.filter(function(el){return fromUser.indexOf(el.id)>-1&&$rootScope.$apply(function(){}),fromUser.indexOf(el.id)>-1});$rootScope.$apply(function(){angular.forEach($rootScope.chats,function(value,index){fromUser.indexOf(value.id)!==-1&&(value.unreadMessageCount=value.unreadMessageCount+1),console.log("Unread message count"+value.unreadMessageCount),$rootScope.IsUserSameChat==$rootScope.sender&&(value.unreadMessageCount=0)})}),console.log("From User:-"+result),console.log("Message recieved from "+from+": "+textMsg)}return!0},$rootScope.$on("msgRecievedBroadcast",function(event,data){SharedMessages.messageRecieve(data)}),$rootScope.closeKeyboard=function(){},SharedMessages}]),angular.module("PatientPortalApp").factory("messageEncryption",function($state,$rootScope){var MessageEncryption={},privateKey=$rootScope.CHATCONSTANTS.privateKey,publicKey=$rootScope.CHATCONSTANTS.publicKey;return MessageEncryption.encryption=function(msg){var encrypt=new JSEncrypt;encrypt.setPublicKey(publicKey);var encrypted=encrypt.encrypt(msg);return encrypted},MessageEncryption.decryption=function(msg){var decrypt=new JSEncrypt;decrypt.setPrivateKey(privateKey);var uncrypted=decrypt.decrypt(msg);return uncrypted},MessageEncryption}),angular.module("PatientPortalApp").factory("DataBaseService",["$state","$rootScope","$q","APIS","$filter",function($state,$rootScope,$q,APIS,$filter){var DatabaseObj={},DataStore={};return DatabaseObj.setData=function(dataObj){DataStore=dataObj,localStorage.setItem("PatientData",JSON.stringify(dataObj))},DatabaseObj.setAppointment=function(appObj){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientScheduledAppointments.push(appObj),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.setAppointments=function(appArray){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientScheduledAppointments=appArray,localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.removeAppointments=function(appObj){DataStore=JSON.parse(localStorage.getItem("PatientData"));var index=DataStore[0].PatientScheduledAppointments.indexOf(appObj);DataStore[0].PatientScheduledAppointments.splice(index,1),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.updateAppointments=function(appObj){DataStore=JSON.parse(localStorage.getItem("PatientData")),angular.forEach(DataStore[0].PatientScheduledAppointments,function(updateAppObj,key){updateAppObj.pc_eid==appObj.appointmentId&&(DataStore[0].PatientScheduledAppointments[key].pc_hometext=appObj.pc_hometext,DataStore[0].PatientScheduledAppointments[key].eventDate=new Date(appObj.appointmentDate),DataStore[0].PatientScheduledAppointments[key].appointmentStartTime=appObj.appointmentTime)})},DatabaseObj.getAppointments=function(){DataStore=JSON.parse(localStorage.getItem("PatientData"));var deferred=$q.defer();return deferred.resolve(DataStore[0].PatientScheduledAppointments),deferred.promise},DatabaseObj.getAppointment=function(appointmentId){DataStore=JSON.parse(localStorage.getItem("PatientData"));var Appointment=$filter("filter")(DataStore[0].PatientScheduledAppointments,function(value){return value.pc_eid==appointmentId})[0];return Appointment},DatabaseObj.getAppointmentsCount=function(){var AppointmentsCount=0;return DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientScheduledAppointments&&(AppointmentsCount=DataStore[0].PatientScheduledAppointments.length),AppointmentsCount},DatabaseObj.setRequestedAppointments=function(appObj){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientRequestedAppointments.push(appObj),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.setAllRequestedAppointments=function(appArray){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientRequestedAppointments=appArray,localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.removeRequestedAppointments=function(appObj){DataStore=JSON.parse(localStorage.getItem("PatientData"));var index=DataStore[0].PatientRequestedAppointments.indexOf(appObj);DataStore[0].PatientRequestedAppointments.splice(index,1),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.getRequestedAppointments=function(){DataStore=JSON.parse(localStorage.getItem("PatientData"));var deferred=$q.defer();return deferred.resolve(DataStore[0].PatientRequestedAppointments),deferred.promise},DatabaseObj.getVisits=function(){DataStore=JSON.parse(localStorage.getItem("PatientData"));var deferred=$q.defer();return deferred.resolve(DataStore[0].PatientVisits),deferred.promise},DatabaseObj.setVisits=function(visits){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientVisits=visits,localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.getVisitsCount=function(){var VisitsCount=0;return DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientVisits&&(VisitsCount=DataStore[0].PatientVisits.length),VisitsCount},DatabaseObj.getMyProvider=function(){DataStore=JSON.parse(localStorage.getItem("PatientData"));var deferred=$q.defer();return deferred.resolve(DataStore[0].PatientProvider),deferred.promise},DatabaseObj.setMedicalDetail=function(MedicalData){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].MedicalData[0]=MedicalData,localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.getMedicalDetail=function(){DataStore=JSON.parse(localStorage.getItem("PatientData"));var deferred=$q.defer();return deferred.resolve(DataStore[0].MedicalData[0]),deferred.promise},DatabaseObj.setAllVisits=function(PatientDetails){localStorage.setItem("PatientVisitsDetails",PatientDetails)},DatabaseObj.setAllFacility=function(Facility){localStorage.setItem("Facility",Facility)},DatabaseObj.getAllFacility=function(){var Facility=JSON.parse(localStorage.getItem("Facility")),deferred=$q.defer();return deferred.resolve(Facility),deferred.promise},DatabaseObj.setAllCountries=function(Countries){localStorage.setItem("Countries",JSON.stringify(Countries))},DatabaseObj.getAllCountries=function(){var Countries=JSON.parse(localStorage.getItem("Countries")),deferred=$q.defer();return deferred.resolve(Countries),deferred.promise},DatabaseObj.setAllState=function(States){localStorage.setItem("States",JSON.stringify(States))},DatabaseObj.getAllStates=function(){var States=JSON.parse(localStorage.getItem("States")),deferred=$q.defer();return deferred.resolve(States),deferred.promise},DatabaseObj.setAllPrescription=function(Prescription){localStorage.setItem("PatientPrescription",Prescription)},DatabaseObj.getPatientPrescription=function(){var Prescription=JSON.parse(localStorage.getItem("PatientPrescription")),deferred=$q.defer();return deferred.resolve(Prescription),deferred.promise},DatabaseObj.setMedicalHistoryVitals=function(Vitals){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].MedicalData[0].vitalslist.push(Vitals),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.setMedicalHistory=function(medicalHistory){DataStore=JSON.parse(localStorage.getItem("PatientData")),angular.forEach(medicalHistory,function(value,key){DataStore[0].MedicalData[0].history[0][key]=medicalHistory[key]}),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.setMedicalProblems=function(problemsObj){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].MedicalData[0].problemlist.unshift(problemsObj),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.setMedicalSurgery=function(SurgeryObj){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].MedicalData[0].surgerylist.unshift(SurgeryObj),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.setDetalHistory=function(DetalObj){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].MedicalData[0].dentallist.unshift(DetalObj),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.setAllergyHistory=function(AllergyObj){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].MedicalData[0].allergylist.unshift(AllergyObj),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.getInsurances=function(){DataStore=JSON.parse(localStorage.getItem("PatientData"));var deferred=$q.defer();return deferred.resolve(DataStore[0].InsuranceData),deferred.promise},DatabaseObj.setAllInsurances=function(insurancesData){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientData=insurancesData,localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.setInsurance=function(insuranceData){var isPreviousInsurance=!1;DataStore=JSON.parse(localStorage.getItem("PatientData"));for(var i=0;i<DataStore[0].InsuranceData.length;i++)DataStore[0].InsuranceData[i].insuranceType==insuranceData.insuranceType&&(isPreviousInsurance=!0,DataStore[0].InsuranceData[i]=insuranceData);isPreviousInsurance||DataStore[0].InsuranceData.push(insuranceData),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.setPhysicians=function(physicians){localStorage.setItem("PhysiciansData",JSON.stringify(physicians))},DatabaseObj.setMessages=function(messages,type){DataStore=JSON.parse(localStorage.getItem("PatientData")),"inbox"==type&&(DataStore[0].PatientMessages[0].Inbox=messages),"sent"==type&&(DataStore[0].PatientMessages[0].SentMessage=messages),"trash"==type&&(DataStore[0].PatientMessages[0].TrashMessage=messages),localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.setDocuments=function(patientDocuments){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientDocuments=patientDocuments,localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.getDocuments=function(){DataStore=JSON.parse(localStorage.getItem("PatientData"));
var deferred=$q.defer();return deferred.resolve(DataStore[0].PatientDocuments),deferred.promise},DatabaseObj.setNotification=function(Notifications){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientNotification=Notifications,localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.updateNotification=function(notification){DataStore=JSON.parse(localStorage.getItem("PatientData"));var editindex=DataStore[0].PatientNotification.indexOf(notification);DataStore[0].PatientNotification[editindex]=notification,localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.getNotification=function(){DataStore=JSON.parse(localStorage.getItem("PatientData"));var deferred=$q.defer();return deferred.resolve(DataStore[0].PatientNotification),deferred.promise},DatabaseObj.getNotificationsCount=function(){var PatientNotificationsCount=0;return DataStore=JSON.parse(localStorage.getItem("PatientData")),PatientNotificationsCount=DataStore[0].PatientNotification.length},DatabaseObj.getPhysician=function(physicianId){try{var physicians=JSON.parse(localStorage.getItem("PhysiciansData")),physician=$filter(physicians,function(value){return value.id==physicianId})[0];return physician}catch(e){return null}},DatabaseObj.getPhysicians=function(){var physicians=JSON.parse(localStorage.getItem("PhysiciansData")),deferred=$q.defer();return deferred.resolve(physicians),deferred.promise},DatabaseObj.getPhysiciansCount=function(){var physicianCount=0,physicians=JSON.parse(localStorage.getItem("PhysiciansData"));return physicians&&(physicianCount=physicians.length),physicianCount},DatabaseObj.getMessages=function(type){DataStore=JSON.parse(localStorage.getItem("PatientData"));var deferred=$q.defer();return"inbox"==type&&deferred.resolve(DataStore[0].PatientMessages[0].Inbox),"sent"==type&&deferred.resolve(DataStore[0].PatientMessages[0].SentMessage),"trash"==type&&deferred.resolve(DataStore[0].PatientMessages[0].TrashMessage),deferred.promise},DatabaseObj.getMessagesCount=function(){var MessagesCount=0;DataStore=JSON.parse(localStorage.getItem("PatientData"));var Messages=DataStore[0].PatientMessages;return Messages&&(MessagesCount=Messages.length),MessagesCount},DatabaseObj.setPatientProfile=function(patientData){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientData[0]=patientData,localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.getPatientProfile=function(){DataStore=JSON.parse(localStorage.getItem("PatientData"));var deferred=$q.defer();return deferred.resolve(DataStore[0].PatientData[0]),deferred.promise},DatabaseObj.getPatientProfileImageUrl=function(){DataStore=JSON.parse(localStorage.getItem("PatientData"));var deferred=$q.defer();try{deferred.resolve(DataStore[0].PatientData[0].profileimage)}catch(e){deferred.resolve("img/Userm.jpg")}return deferred.promise},DatabaseObj.setPatientId=function(id){localStorage.setItem("patientid",id)},DatabaseObj.setPatientFullName=function(fullName){localStorage.setItem("patientfullName",fullName)},DatabaseObj.setIsSessionExpired=function(flag){localStorage.setItem("isSessionExpired",flag)},DatabaseObj.setDeviceToken=function(token){localStorage.setItem("deviceToken",token)},DatabaseObj.setApiConfig=function(data){localStorage.setItem("apiConfig",JSON.stringify(data))},DatabaseObj.setOrgDetail=function(orgDetail){localStorage.setItem("orgDetail",JSON.stringify(orgDetail))},DatabaseObj.setFacilityId=function(orgId){localStorage.setItem("facilityId",orgId)},DatabaseObj.setPhysician=function(physician){localStorage.setItem("physician",JSON.stringify(physician))},DatabaseObj.setUser=function(userName){localStorage.setItem("user",userName)},DatabaseObj.getPatientId=function(){return localStorage.getItem("patientid")},DatabaseObj.getPatientFullName=function(){return localStorage.getItem("patientfullName")},DatabaseObj.getDeviceToken=function(){return localStorage.getItem("deviceToken")},DatabaseObj.getApiConfig=function(){return localStorage.getItem("apiConfig")},DatabaseObj.getOrgDetail=function(){return localStorage.getItem("orgDetail")},DatabaseObj.getFacilityId=function(){return localStorage.getItem("facilityId")},DatabaseObj.getIsSessionExpired=function(){return localStorage.getItem("isSessionExpired")},DatabaseObj.getUser=function(){return localStorage.getItem("user")},DatabaseObj.setAllFeesheet=function(feesheetArray){DataStore=JSON.parse(localStorage.getItem("PatientData")),DataStore[0].PatientBilldata=feesheetArray,localStorage.setItem("PatientData",JSON.stringify(DataStore))},DatabaseObj.getAllFeesheet=function(){DataStore=JSON.parse(localStorage.getItem("PatientData"));var deferred=$q.defer();return deferred.resolve(DataStore[0].PatientBilldata[0]),deferred.promise},DatabaseObj.removeLoginPatient=function(){localStorage.removeItem("patientfullName"),localStorage.removeItem("patientid"),localStorage.removeItem("searchString"),localStorage.removeItem("isRequestStarted")},DatabaseObj.setMyCurrentLocation=function(mylocation){var convertedLocation={};convertedLocation.latitude=mylocation.coords.latitude,convertedLocation.longitude=mylocation.coords.longitude,localStorage.setItem("MyCurrentLocation",JSON.stringify(convertedLocation))},DatabaseObj.getMyCurrentLocation=function(){return JSON.parse(localStorage.getItem("MyCurrentLocation"))},DatabaseObj}]),function(){angular.module("PatientPortalApp").service("sharedService",function($rootScope,$ionicLoading,CookieService){this.apiConfig={},this.setApiConfig=function(obj){this.apiConfig=obj},this.getApiConfig=function(){return this.apiConfig},this.createRequestData=function(requestType,dataObj){switch(requestType){case"XML":break;case"application/x-www-form-urlencoded":var token=CookieService.readCookie("token");dataObj.token=token;var formData=$.param(dataObj);return formData;case"JSON":return dataObj}},this.checkConnection=function(){var returnValue=!1;return document.addEventListener("deviceready",function(){try{var networkState=navigator.connection.type;networkState!=Connection.NONE&&(returnValue=!0)}catch(e){console.log(e)}}),returnValue},this.getFileExtension=function(fileType){var FileExtension="";return fileType.toLocaleLowerCase().indexOf($rootScope.APPCONSTANTS.PDF)>-1?FileExtension=$rootScope.APPCONSTANTS.PDFEXTENSION:fileType.toLocaleLowerCase().indexOf($rootScope.APPCONSTANTS.PNG)>-1?FileExtension=$rootScope.APPCONSTANTS.PNGEXTENSION:fileType.toLocaleLowerCase().indexOf($rootScope.APPCONSTANTS.JPG)>-1?FileExtension=$rootScope.APPCONSTANTS.JPGEXTENSION:fileType.toLocaleLowerCase().indexOf($rootScope.APPCONSTANTS.ZIP)>-1&&(FileExtension=$rootScope.APPCONSTANTS.ZIPEXTENSION),FileExtension},this.showNotification=function(message){document.addEventListener("deviceready",function(){window.plugins.toast.show(message,"long","center",function(a){},function(b){})})}}).factory("GetReqParams",function(APIS,sharedService){function genXmlReqParams(method,postReqParams){return xml="<"+method.request.mappedField+">",angular.forEach(method.request.mapping,function(value,key){var xmlNodeStrt="<"+value+">",xmlNodeEnd="</"+value+">",nodeText=postReqParams[key];xml=xml+xmlNodeStrt+nodeText+xmlNodeEnd}),xml=xml+"</"+method.request.mappedField+">",console.log(xml),xml}var xml,login;return{getReqParams:function(method,postReqParams){var org=sharedService.getApiConfig();switch(org=org[APIS.APICONFIG],method){case"PATIENTLOGIN":return login=org[APIS.PATIENTLOGIN],genXmlReqParams(login,postReqParams)}}}}).factory("TemplateFactory",function(APIS,sharedService){var PhysicianTemplate,MedicalHistoryTemplate,PatientAppointmentTemplate,DoctorSheduleTemplate,AddAppointmentTemplate,RequestAppointmentTemplate,AddmessageTemplate,DeleteAppointmentTemplate,GetUpcomingAppointmentTemplate,SentMessageTemplate,FacilityTemplate,GetEmailTemplate,DeleteMessageTemplate,UpdatePatientProfileTemplate,AddNewInsuranceTemplate,UpdateInsuranceTemplate,FrequentlyVisitedUsersTemplate,PatientVisitsTemplate,FeesheetTemplate,UpdateappointmentTemplate,GetInsuranceCompaniesTemplate,DeleteRequestedAppointmentTemplate,PatientProfileImageTemplate,UpdatePatientProfileImageTemplate,GetRequestedAppointmentNewTemplate,CancelRequestedAppointmentNewTemplate,MyProviderTemplate,GetNotificationsCountTemplate,AddPatientDocumentTemplete,DeletePatientDocumentTemplate,GetPrescriptionTemplate,GetVisitSummeryTemplate,AddVitalTemplate,AddMedicalRecordsTemplate,RequestSAppointmentNewTemplate,PatientCcrCcdReportTemplate,PatientMedicalRecordTemplate,PatientBillRecordTemplate,LoginObjectTemplate,AddDeviceTokenTemplate,deleteNotificationTemplate,mailtoPatientTemplate,forgetPasswordTemplate,changePasswordTemplate,changemessagestatusTemplate,getCountries,getStates,AddLifeStyleHistoryTemplate,AddFamilyHistoryTemplate,readNotificationTemplate,businessServiceTemplate,GetInsuranceTemplate,AddInsuranceTemplate,getPatientProfileTemplate,updatePatientProfileData;return{getTemplate:function(method,type){var org=sharedService.getApiConfig();switch(org=org[APIS.APICONFIG],method){case"ADDINSURANCE":return AddInsuranceTemplate=org[APIS.ADDINSURANCE][type];case"GETINSURANCE":return GetInsuranceTemplate=org[APIS.GETINSURANCE][type];case"ADDLIFESTYLEHISTORY":return AddLifeStyleHistoryTemplate=org[APIS.ADDLIFESTYLEHISTORY][type];case"PATIENTPORTALBUSINESSSERVICE":return businessServiceTemplate=org[APIS.PATIENTPORTALBUSINESSSERVICE][type];case"ADDFAMILYHISTORY":return AddFamilyHistoryTemplate=org[APIS.ADDFAMILYHISTORY][type];case"ADDDEVICETOKEN":return AddDeviceTokenTemplate=org[APIS.ADDDEVICETOKEN][type];case"CHANGEMESSAGESTATUS":return changemessagestatusTemplate=org[APIS.CHANGEMESSAGESTATUS][type];case"LOGINOBJECT":return LoginObjectTemplate=org[APIS.LOGINOBJECT][type];case"FORGETPASSWORD":return forgetPasswordTemplate=org[APIS.FORGETPASSWORD][type];case"CHANGEPASSWORD":return changePasswordTemplate=org[APIS.CHANGEPASSWORD][type];case"DELETENOTIFICATION":return deleteNotificationTemplate=org[APIS.DELETENOTIFICATION][type];case"MAILTOPATIENT":return mailtoPatientTemplate=org[APIS.MAILTOPATIENT][type];case"PATIENTBILLREPORT":return PatientBillRecordTemplate=org[APIS.PATIENTBILLREPORT][type];case"PATIENTCCRCCDREPORT":return PatientCcrCcdReportTemplate=org[APIS.PATIENTCCRCCDREPORT][type];case"GENERATEPATIENTMEDICALRECORD":return PatientMedicalRecordTemplate=org[APIS.GENERATEPATIENTMEDICALRECORD][type];case"GETNOTIFICATIONSCOUNT":return GetNotificationsCountTemplate=org[APIS.GETNOTIFICATIONSCOUNT][type];case"UPDATEPATIENTPROFILEIMAGE":return UpdatePatientProfileImageTemplate=org[APIS.UPDATEPATIENTPROFILEIMAGE][type];case"GETVISITSUMMERY":return GetVisitSummeryTemplate=org[APIS.GETVISITSUMMERY][type];case"ADDPATIENTDOCUMENT":return AddPatientDocumentTemplete=org[APIS.ADDPATIENTDOCUMENT][type];case"GETPATIENTDOCUMENT":return GetPatientPhotographTemplete=org[APIS.GETPATIENTDOCUMENT][type],GetPatientPhotographTemplete;case"DELETEPATIENTDOCUMENT":return DeletePatientDocumentTemplate=org[APIS.DELETEPATIENTDOCUMENT][type];case"FREQUENTLYVISITEDUSERS":return FrequentlyVisitedUsersTemplate=org[APIS.FREQUENTLYVISITEDUSERS][type];case"GETPATIENTPROFILEIMAGE":return PatientProfileImageTemplate=org[APIS.GETPATIENTDOCUMENT][type];case"DELETEREQUESTEDAPPOINTMENT":return DeleteRequestedAppointmentTemplate=org[APIS.DELETEREQUESTEDAPPOINTMENT][type];case"PATIENTLOGIN":return PatientLoginTemplate=org[APIS.PATIENTLOGIN][type],PatientLoginTemplate;case"GETPHYSCIAN":return PhysicianTemplate=org[APIS.GETPHYSCIAN][type];case"GETMEDICALHISTORY":return MedicalHistoryTemplate=org[APIS.GETMEDICALHISTORY][type];case"GETPATIENTAPPOINTMENT":return PatientAppointmentTemplate=org[APIS.GETPATIENTAPPOINTMENT][type];case"GETDOCTORSHEDULE":return DoctorSheduleTemplate=org[APIS.GETDOCTORSHEDULE][type];case"GETREQUESTEDAPPOINTMENTNEW":return GetRequestedAppointmentNewTemplate=org[APIS.GETREQUESTEDAPPOINTMENTNEW][type];case"ADDAPPOINTMENT":return AddAppointmentTemplate=org[APIS.ADDAPPOINTMENT][type];case"UPDATEAPPOINTMENT":return UpdateappointmentTemplate=org[APIS.UPDATEAPPOINTMENT][type];case"REQUESTAPPOINTMENT":return RequestAppointmentTemplate=org[APIS.REQUESTAPPOINTMENT][type];case"ADDMESSAGE":return AddmessageTemplate=org[APIS.ADDMESSAGE][type];case"GETSENTMESSAGES":return SentMessageTemplate=org[APIS.GETSENTMESSAGES][type];case"DELETEAPPOINTMENT":return DeleteAppointmentTemplate=org[APIS.DELETEAPPOINTMENT][type];case"GETUPCOMINGAPPOINTMENT":return GetUpcomingAppointmentTemplate=org[APIS.GETUPCOMINGAPPOINTMENT][type];case"DELETEMESSAGES":return DeleteMessageTemplate=org[APIS.DELETEMESSAGES][type];case"GETMAILLIST":return GetEmailTemplate=org[APIS.GETMAILLIST][type];case"FACILITY":return FacilityTemplate=org[APIS.FACILITY][type];case"GETNOTIFICATIONS":return NotificationTemplate=org[APIS.GETNOTIFICATIONS][type],NotificationTemplate;case"UPDATEPROFILE":return UpdatePatientProfileTemplate=org[APIS.UPDATEPROFILE][type];case"ADDNEWINSURANCE":return AddNewInsuranceTemplate=org[APIS.ADDNEWINSURANCE][type];case"UPDATEINSURANCE":return UpdateInsuranceTemplate=org[APIS.UPDATEINSURANCE][type];case"GETPATIENTVISITS":return PatientVisitsTemplate=org[APIS.GETPATIENTVISITS][type];case"GETFEESHEET":return FeesheetTemplate=org[APIS.GETFEESHEET][type];case"GETINSURANCECOMPANIES":return GetInsuranceCompaniesTemplate=org[APIS.GETINSURANCECOMPANIES][type];case"DELETEREQUESTEDAPPOINTMENTNEW":return CancelRequestedAppointmentNewTemplate=org[APIS.DELETEREQUESTEDAPPOINTMENTNEW][type];case"MYPROVIDER":return MyProviderTemplate=org[APIS.MYPROVIDER][type];case"GETPRESCRIPTION":return GetPrescriptionTemplate=org[APIS.GETPRESCRIPTION][type];case"ADDVITAL":return AddVitalTemplate=org[APIS.ADDVITAL][type];case"ADDMEDICALRECORDS":return AddMedicalRecordsTemplate=org[APIS.ADDMEDICALRECORDS][type];case"REQUESTAPPOINTMENTNEW":return RequestSAppointmentNewTemplate=org[APIS.REQUESTAPPOINTMENTNEW][type];case"GETCOUNTRIES":return getCountries=org[APIS.GETCOUNTRIES][type];case"GETSTATES":return getStates=org[APIS.GETSTATES][type];case"READNOTIFICATION":return readNotificationTemplate=org[APIS.READNOTIFICATION][type];case"GETPATIENTPROFILE":return getPatientProfileTemplate=org[APIS.GETPATIENTPROFILE][type];case"UPDATEPATIENTPROFILEDATA":return updatePatientProfileData=org[APIS.UPDATEPATIENTPROFILEDATA][type]}}}}).factory("GetUrlFactory",function(APIS,sharedService){function formRequest(method,rqstprm){var url=method.url,len=Object.keys(rqstprm).length;if(len>0){url=method.url+"?";for(var j=0;j<method.urlParam.length;j++)rqstprm[method.urlParam[j].mapField]&&(url=j!=len-1?url+method.urlParam[j].paramName+"="+rqstprm[method.urlParam[j].mapField]+"&":url+method.urlParam[j].paramName+"="+rqstprm[method.urlParam[j].mapField])}return url}var Physician,History,PatientAppointment,DoctorShedule,AddAppointment,RequestAppointment,Addmessage,DeleteAppointment,PatientLogin,UpcomingAppointment,SentMessages,Facility,GetEmailsList,DeleteMessage,UpdatePatientProfile,AddNewInsurance,UpdateInsurance,FrequentlyVisitedUsers,PatientVisits,GetFeesheet,UpdateAppointment,GetNotification,GetInsuranceCompanies,DeleteRequestedAppointment,PatientProfileImage,UpdatePatientProfileImage,GetRequestedAppointmentNew,CancelRequestedAppointmentNew,GetNotificationsCount,MyProvider,AddPatientDocument,GetPatientDocument,DeletePatientDocument,GetPrescription,GetVisitSummery,AddVital,AddMedicalRecords,RequestSAppointmentNew,PatientCcrCcdReport,PatientMedicalRecord,PatientBillRecord,LoginObject,AddDeviceToken,Deletenotification,MailToPatient,ForgetPassword,changePassword,changemessagestatus,getCountries,getStates,AddLifeStyleHistory,AddFamilyHistory,readNotification,bussinessService,GetInsurance,AddInsurance,getPatientProfile,updatePatientProfileData;return{getUrl:function(method,rqstprm){var org=sharedService.getApiConfig();switch(org=org[APIS.APICONFIG],method){case"ADDINSURANCE":return AddInsurance=org[APIS.ADDINSURANCE],formRequest(AddInsurance,rqstprm);case"GETINSURANCE":return GetInsurance=org[APIS.GETINSURANCE],formRequest(GetInsurance,rqstprm);case"ADDLIFESTYLEHISTORY":return AddLifeStyleHistory=org[APIS.ADDLIFESTYLEHISTORY],formRequest(AddLifeStyleHistory,rqstprm);case"PATIENTPORTALBUSINESSSERVICE":return bussinessService=org[APIS.PATIENTPORTALBUSINESSSERVICE],formRequest(bussinessService,rqstprm);case"ADDFAMILYHISTORY":return AddFamilyHistory=org[APIS.ADDFAMILYHISTORY],formRequest(AddFamilyHistory,rqstprm);case"ADDDEVICETOKEN":return AddDeviceToken=org[APIS.ADDDEVICETOKEN],formRequest(AddDeviceToken,rqstprm);case"CHANGEMESSAGESTATUS":return changemessagestatus=org[APIS.CHANGEMESSAGESTATUS],formRequest(changemessagestatus,rqstprm);case"LOGINOBJECT":return LoginObject=org[APIS.LOGINOBJECT],formRequest(LoginObject,rqstprm);case"FORGETPASSWORD":return ForgetPassword=org[APIS.FORGETPASSWORD],formRequest(ForgetPassword,rqstprm);case"CHANGEPASSWORD":return changePassword=org[APIS.CHANGEPASSWORD],formRequest(changePassword,rqstprm);case"DELETENOTIFICATION":return Deletenotification=org[APIS.DELETENOTIFICATION],formRequest(Deletenotification,rqstprm);case"MAILTOPATIENT":return MailToPatient=org[APIS.MAILTOPATIENT],formRequest(MailToPatient,rqstprm);case"PATIENTBILLREPORT":return PatientBillRecord=org[APIS.PATIENTBILLREPORT],formRequest(PatientBillRecord,rqstprm);case"PATIENTCCRCCDREPORT":return PatientCcrCcdReport=org[APIS.PATIENTCCRCCDREPORT],formRequest(PatientCcrCcdReport,rqstprm);case"GENERATEPATIENTMEDICALRECORD":return PatientMedicalRecord=org[APIS.GENERATEPATIENTMEDICALRECORD],formRequest(PatientMedicalRecord,rqstprm);case"GETNOTIFICATIONSCOUNT":return GetNotificationsCount=org[APIS.GETNOTIFICATIONSCOUNT],formRequest(GetNotificationsCount,rqstprm);case"UPDATEPATIENTPROFILEIMAGE":return UpdatePatientProfileImage=org[APIS.UPDATEPATIENTPROFILEIMAGE],formRequest(UpdatePatientProfileImage,rqstprm);case"GETVISITSUMMERY":return GetVisitSummery=org[APIS.GETVISITSUMMERY],formRequest(GetVisitSummery,rqstprm);case"ADDPATIENTDOCUMENT":return AddPatientDocument=org[APIS.ADDPATIENTDOCUMENT],formRequest(AddPatientDocument,rqstprm);case"GETPATIENTDOCUMENT":return GetPatientDocument=org[APIS.GETPATIENTDOCUMENT],formRequest(GetPatientDocument,rqstprm);case"DELETEPATIENTDOCUMENT":return DeletePatientDocument=org[APIS.DELETEPATIENTDOCUMENT],formRequest(DeletePatientDocument,rqstprm);case"FREQUENTLYVISITEDUSERS":return FrequentlyVisitedUsers=org[APIS.FREQUENTLYVISITEDUSERS],formRequest(FrequentlyVisitedUsers,rqstprm);case"GETPATIENTPROFILEIMAGE":return PatientProfileImage=org[APIS.GETPATIENTPROFILEIMAGE],formRequest(PatientProfileImage,rqstprm);case"DELETEREQUESTEDAPPOINTMENT":return DeleteRequestedAppointment=org[APIS.DELETEREQUESTEDAPPOINTMENT],formRequest(DeleteRequestedAppointment,rqstprm);case"GETNOTIFICATIONS":return GetNotification=org[APIS.GETNOTIFICATIONS],formRequest(GetNotification,rqstprm);case"READNOTIFICATION":return readNotification=org[APIS.READNOTIFICATION],formRequest(readNotification,rqstprm);case"UPDATEAPPOINTMENT":return UpdateAppointment=org[APIS.UPDATEAPPOINTMENT],formRequest(UpdateAppointment,rqstprm);case"PATIENTLOGIN":return PatientLogin=org[APIS.PATIENTLOGIN],formRequest(PatientLogin,rqstprm);case"GETPHYSCIAN":return Physician=org[APIS.GETPHYSCIAN],formRequest(Physician,rqstprm);case"GETMEDICALHISTORY":return History=org[APIS.GETMEDICALHISTORY],formRequest(History,rqstprm);case"GETPATIENTAPPOINTMENT":return PatientAppointment=org[APIS.GETPATIENTAPPOINTMENT],formRequest(PatientAppointment,rqstprm);case"GETDOCTORSHEDULE":return DoctorShedule=org[APIS.GETDOCTORSHEDULE],formRequest(DoctorShedule,rqstprm);case"GETREQUESTEDAPPOINTMENTNEW":return GetRequestedAppointmentNew=org[APIS.GETREQUESTEDAPPOINTMENTNEW],formRequest(GetRequestedAppointmentNew,rqstprm);case"ADDAPPOINTMENT":return AddAppointment=org[APIS.ADDAPPOINTMENT],formRequest(AddAppointment,rqstprm);case"REQUESTAPPOINTMENT":return RequestAppointment=org[APIS.REQUESTAPPOINTMENT],formRequest(RequestAppointment,rqstprm);case"GETMAILLIST":return GetEmailsList=org[APIS.GETMAILLIST],formRequest(GetEmailsList,rqstprm);case"ADDMESSAGE":return Addmessage=org[APIS.ADDMESSAGE],formRequest(Addmessage,rqstprm);case"GETSENTMESSAGES":return SentMessages=org[APIS.GETSENTMESSAGES],formRequest(SentMessages,rqstprm);case"DELETEAPPOINTMENT":return DeleteAppointment=org[APIS.DELETEAPPOINTMENT],formRequest(DeleteAppointment,rqstprm);case"DELETEMESSAGES":return DeleteMessage=org[APIS.DELETEMESSAGES],formRequest(DeleteMessage,rqstprm);case"GETUPCOMINGAPPOINTMENT":return UpcomingAppointment=org[APIS.GETUPCOMINGAPPOINTMENT],formRequest(UpcomingAppointment,rqstprm);case"FACILITY":return Facility=org[APIS.FACILITY],formRequest(Facility,rqstprm);case"UPDATEPROFILE":return UpdatePatientProfile=org[APIS.UPDATEPROFILE],formRequest(UpdatePatientProfile,rqstprm);case"ADDNEWINSURANCE":return AddNewInsurance=org[APIS.ADDNEWINSURANCE],formRequest(AddNewInsurance,rqstprm);case"UPDATEINSURANCE":return UpdateInsurance=org[APIS.UPDATEINSURANCE],formRequest(UpdateInsurance,rqstprm);case"GETPATIENTVISITS":return PatientVisits=org[APIS.GETPATIENTVISITS],formRequest(PatientVisits,rqstprm);case"GETFEESHEET":return GetFeesheet=org[APIS.GETFEESHEET],formRequest(GetFeesheet,rqstprm);case"GETINSURANCECOMPANIES":return GetInsuranceCompanies=org[APIS.GETINSURANCECOMPANIES],formRequest(GetInsuranceCompanies,rqstprm);case"DELETEREQUESTEDAPPOINTMENTNEW":return CancelRequestedAppointmentNew=org[APIS.DELETEREQUESTEDAPPOINTMENTNEW],formRequest(CancelRequestedAppointmentNew,rqstprm);case"MYPROVIDER":return MyProvider=org[APIS.MYPROVIDER],formRequest(MyProvider,rqstprm);case"GETPRESCRIPTION":return GetPrescription=org[APIS.GETPRESCRIPTION],formRequest(GetPrescription,rqstprm);case"ADDVITAL":return AddVital=org[APIS.ADDVITAL],formRequest(AddVital,rqstprm);case"ADDMEDICALRECORDS":return AddMedicalRecords=org[APIS.ADDMEDICALRECORDS],formRequest(AddMedicalRecords,rqstprm);case"REQUESTAPPOINTMENTNEW":return RequestSAppointmentNew=org[APIS.REQUESTAPPOINTMENTNEW],formRequest(RequestSAppointmentNew,rqstprm);case"GETCOUNTRIES":return getCountries=org[APIS.GETCOUNTRIES],formRequest(getCountries,rqstprm);case"GETSTATES":return getStates=org[APIS.GETSTATES],formRequest(getStates,rqstprm);case"GETPATIENTPROFILE":return getPatientProfile=org[APIS.GETPATIENTPROFILE],formRequest(getPatientProfile,rqstprm);case"UPDATEPATIENTPROFILEDATA":return updatePatientProfileData=org[APIS.UPDATEPATIENTPROFILEDATA],formRequest(updatePatientProfileData,rqstprm)}}}}).service("configFactory",function(TemplateFactory,sharedService,$rootScope,$filter){function getResponse(nodeObj,jsonData){var resArray=[];if(!angular.isArray(jsonData)&&jsonData.mappedField){var xmlNodeTagMapping=jsonData.mappedField.replace(".",">"),nodeArray=$(nodeObj).find(xmlNodeTagMapping);angular.forEach(nodeArray,function(subNodeObj){var DataObject={};angular.forEach(jsonData.mapping,function(value,key){if(angular.isObject(value))DataObject[key]=getResponse(subNodeObj,value);else if(dateFormat.test($(subNodeObj).find(value).text())){var filteredDate=new Date($(subNodeObj).find(value).text());angular.isDate(filteredDate)&&(DataObject[key]=$filter("date")(filteredDate,"yyyy-MM-dd"))}else DataObject[key]=$(subNodeObj).find(value).text()}),resArray.push(DataObject)})}return resArray}function getRequest(data,applicationJsonData){var DataObject={};return angular.forEach(applicationJsonData.mapping,function(value,key){try{DataObject[value]=data[key]}catch(e){console.log(e)}}),sharedService.createRequestData(applicationJsonData.content_type,DataObject)}var dateFormat=/(^\d{1,4}[\.|\\/|-]\d{1,2}[\.|\\/|-]\d{1,4})(\s*(?:0?[1-9]:[0-5]|1(?=[012])\d:[0-5])\d\s*[ap]m)?$/;this.getTranformResponse=function(data,headers,paramMethod){if(headers($rootScope.APPCONSTANTS.CONTENTTYPE).toLocaleLowerCase()==$rootScope.APPCONSTANTS.XMLCONTENTTYPE&&angular.isString(data)){var resArray=[],applicationJsonData=TemplateFactory.getTemplate(paramMethod,$rootScope.APPCONSTANTS.RESPONSE),xmlDoc=$.parseXML(data.trim());if(angular.isArray(applicationJsonData))angular.forEach(applicationJsonData,function(appjsonObj){var mainDataObj={},xmlNodeTagMapping=appjsonObj.mappedField.replace(".",">"),objkey=xmlNodeTagMapping.replace(">","_"),nodeArray=$(xmlDoc).find(xmlNodeTagMapping);angular.forEach(nodeArray,function(nodeObj){var DataObject={};angular.forEach(appjsonObj.mapping,function(value,key){if(angular.isObject(value))DataObject[key]=getResponse(nodeObj,value);else if(dateFormat.test($(nodeObj).find(value).text())){var filteredDate=new Date($(nodeObj).find(value).text());angular.isDate(filteredDate)&&(DataObject[key]=$filter("date")(filteredDate,"yyyy-MM-dd"))}else DataObject[key]=$(nodeObj).find(value).text()}),mainDataObj[objkey]=DataObject,resArray.push(mainDataObj)})});else{var xmlNodeTagMapping=applicationJsonData.mappedField.replace(".",">"),nodeArray=$(xmlDoc).find(xmlNodeTagMapping);angular.forEach(nodeArray,function(nodeObj){var DataObject={};angular.forEach(applicationJsonData.mapping,function(value,key){if(angular.isObject(value))DataObject[key]=getResponse(nodeObj,value);else if(dateFormat.test($(nodeObj).find(value).text())){var filteredDate=new Date($(nodeObj).find(value).text());angular.isDate(filteredDate)&&(DataObject[key]=$filter("date")(filteredDate,"yyyy-MM-dd"))}else DataObject[key]=$(nodeObj).find(value).text()}),resArray.push(DataObject)})}return resArray}return data},this.getTranformRequest=function(data,paramMethod){var applicationJsonData=TemplateFactory.getTemplate(paramMethod,$rootScope.APPCONSTANTS.REQUEST);if(angular.isArray(applicationJsonData)){for(var resArray=[],i=0;i<applicationJsonData.length;i++){var res=getRequest(applicationJsonData[i]);resArray.push(res)}return resArray}return getRequest(data,applicationJsonData)}}).service("CookieService",function(){this.createCookie=function(name,value,days){if(days){var date=new Date;date.setTime(date.getTime()+24*days*60*60*1e3);var expires="; expires="+date.toGMTString()}else var expires="";document.cookie=name+"="+value+expires+"; path=/"},this.readCookie=function(name){for(var nameEQ=name+"=",ca=document.cookie.split(";"),i=0;i<ca.length;i++){for(var c=ca[i];" "==c.charAt(0);)c=c.substring(1,c.length);if(0==c.indexOf(nameEQ))return c.substring(nameEQ.length,c.length)}return null},this.eraseCookie=function(name){createCookie(name,"",-1)}})}();